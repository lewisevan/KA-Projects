/**
 * This contest has already ended!
 * To view the winners, please visit this program: 
 * https://www.khanacademy.org/computer-programming/kacp-challenge-council/5745407636209664
*/

/* 
    I've been programming X months, and I have learned YY% of Intro to JS.
    I would prefer to be placed in the (Beginner, Intermediate, or Advanced) bracket.
    TODO: Fill that out ^
    
    TODO: Remove starter code below.
*/

/**
 * Click to play!
 * 
 * Controls:
 * Arrow keys to move
 * Click to shoot
 * 
 * To win, destroy all enemy ships. Don't get hit by the 
 * enemy bombs or let the enemy ships touch you!
 */

// Change to true to enable sounds
var sound = false;

// Global constants
{
var CANVAS_WIDTH = 600;
var CANVAS_HEIGHT = 600;
var GRAVITY = -0.1;
var PROJECTILE_SIZE = 10;
var HALO_SIZE = 20;
var MAX_ARMOR = 3;
var PROJECTILE_SPEED = -5;
var NUM_INVADER_SHIPS = 4;
var SHIP_SPACING = 60;
var SHIPS_X = 6;
var SHIPS_Y = 6;
var FIRING_PROBABILITY = 0.0005;
var NUM_CANNONS = 5;
var SPREAD = 0.25;
var FLEET_MOVE_X = 1;
var FLEET_MOVE_Y = 5;
var MOVE_DELTA = 3;
var DEFENDER_SHIP_HEIGHT = 60;
var DEFENDER_SHIP_WIDTH = 50;
var today = new Date();

// Global variables
var enemyFleet = [[],[],[],[],[],[]];
var defender;
var projectiles = [];
var fleetMovePositiveX;
var score;

// Startup controls
var launched = false;
var init = false;
}

// Images
// Images designed by Iowa State Computer Science Department
var img180 = {note: "See http://tinyurl.com/KAImage4U to do your own image.",
author: "Created by Bob Lyon for Khan Academy image users.",
inflate: function(a){if(img180.img){return img180.img;}var c=function(a){var b=0,c,d,e;c=0;for(e=a.length;c<e;c++){d=a.charCodeAt(c);b=29*b+d|0;}return b&2147483647;},b=function(a){var b,c,d,e,h=256,f=[];for(b=0;256>b;b+=1){f[b]=String.fromCharCode(b);}d=c=String.fromCharCode(a[0]);for(b=1;b<a.length;b+=1){e=a[b];if(f[e]){e=f[e];}else if(e===h){e=c+c.charAt(0);}else{return null;}d+=e;f[h++]=c+e.charAt(0);c=e;}return d;},d=function(a){return this[a];}("JSON").parse(a?a:img180.csc);if(d){var e;a=(a=b(d.pix))?a:d.pix;b=255/d.digit.length;img180.img=createGraphics(d.width,d.height,JAVA2D);if(img180.img){img180.img.background(0,0,0,0);var f=img180.img.get(),k=f.sourceImg.getContext("2d"),g=k.getImageData(0,0,img180.img.width,img180.img.height),b=c(img180.note+img180.author)===d.h?b:b/4;for(e=c=0;c<a.length;){g.data[e++]=round(b*d.digit.indexOf(a[c++]));g.data[e++]=round(b*d.digit.indexOf(a[c++]));g.data[e++]=round(b*d.digit.indexOf(a[c++]));g.data[e++]=255;}k.putImageData(g,0,0);img180.img.image(f,0,0);}}return img180.img;}, 
};
{
var deflatedImage = '{"width":220,"height":220,"digit":"()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^abcdefghijklmnopqrstuvwxyz{|}~¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþ","h":1689796942,"pix":[53,43,40,256,258,257,259,262,257,51,42,40,254,228,267,225,270,272,254,271,254,192,61,88,41,61,62,43,46,263,260,286,285,285,51,257,47,257,46,257,41,295,257,42,261,300,287,257,81,46,58,304,57,307,219,55,107,240,58,121,313,315,314,316,316,206,54,99,288,301,324,302,327,326,112,45,40,248,49,332,334,333,335,338,337,337,252,334,326,344,325,346,328,347,345,348,351,350,285,210,43,78,209,356,358,357,359,362,361,78,76,43,49,353,349,370,352,301,52,266,235,124,267,223,40,85,61,372,383,259,223,48,339,336,389,388,338,243,343,371,369,40,44,266,340,390,400,391,337,49,266,326,205,377,274,273,275,412,411,267,229,40,52,395,419,384,420,396,423,420,253,242,267,240,428,430,254,429,432,431,433,436,430,265,421,286,439,254,416,410,445,413,254,226,40,46,41,440,424,453,422,257,215,55,105,319,318,462,317,121,321,323,456,455,327,330,403,401,473,40,342,469,454,478,468,479,286,418,417,257,483,486,485,488,484,477,480,420,125,84,43,254,212,40,55,44,41,481,285,386,472,506,337,393,491,327,398,507,474,402,405,351,408,414,446,519,275,416,483,503,492,351,290,40,230,43,104,530,532,531,232,535,531,192,43,82,525,40,426,435,545,434,547,437,548,40,439,57,257,553,40,555,555,524,264,266,443,521,273,449,451,510,542,454,374,40,213,52,104,239,56,120,461,464,320,322,568,468,471,402,585,474,476,582,567,526,589,592,591,594,286,68,51,41,231,123,42,570,589,505,586,513,40,509,589,45,266,247,334,613,40,615,617,614,619,616,334,516,326,196,117,563,520,628,523,595,593,551,257,229,43,103,226,43,102,638,640,639,641,188,43,80,542,544,550,650,549,652,438,399,514,334,55,301,442,444,447,447,565,452,632,666,257,91,89,72,254,254,200,246,116,189,578,578,466,285,58,43,48,89,646,685,80,687,689,686,691,688,692,690,80,194,45,67,249,49,49,700,702,701,703,706,705,701,253,49,684,694,646,81,43,71,667,590,719,718,721,371,439,114,77,502,631,301,605,656,506,609,420,68,43,57,695,738,713,693,741,739,742,740,212,117,56,628,662,519,269,559,720,595,528,635,104,641,759,643,639,193,43,83,648,427,651,546,653,550,439,606,337,658,441,561,230,627,275,664,754,782,326,93,91,671,254,203,247,117,190,241,58,122,242,794,796,795,794,208,54,100,285,59,43,50,99,43,88,808,810,809,811,814,813,816,812,818,811,198,45,72,250,49,51,824,826,825,827,830,829,825,710,49,815,818,87,356,722,783,728,841,843,350,603,842,385,387,773,731,733,383,71,43,60,836,857,817,858,819,859,862,818,210,111,63,749,779,267,752,847,842,756,531,760,642,877,194,764,766,769,882,768,434,772,731,775,259,442,236,267,232,267,233,894,896,254,235,450,665,872,844,373,266,570,846,440,805,807,863,860,912,817,821,823,832,828,918,831,918,834,860,838,78,840,926,902,927,903,510,516,48,266,933,40,935,937,934,939,40,623,420,854,856,911,946,861,948,913,864,112,62,448,267,227,870,957,268,415,960,254,893,753,929,326,528,533,876,876,199,43,86,881,884,770,976,551,655,506,888,928,371,487,490,965,902,909,97,43,89,989,991,990,992,995,994,997,993,999,992,915,824,49,1003,1005,701,1006,1004,709,711,996,999,85,43,79,986,930,1017,1019,982,1018,371,944,1012,1025,998,1026,1000,1027,1030,1029,1032,1028,992,854,64,1020,383,528,641,223,43,100,222,43,99,1045,1047,1046,196,43,84,648,243,267,767,1057,1056,1059,254,1058,1061,1060,427,886,980,1021,326,516,249,59,188,247,59,125,248,59,126,907,1038,454,682,51,82,639,1085,102,1087,1089,1086,1091,1088,1092,1090,102,715,102,80,42,1098,1100,1099,1101,1104,1103,1106,1100,1095,1087,75,43,87,542,71,48,56,1115,1117,1116,1118,1121,1116,1080,1068,1125,1022,1127,1081,257,69,43,62,1109,1094,1135,1093,1137,1134,1138,1136,1139,1142,639,65,43,68,1129,1128,468,598,551,452,1151,1154,452,50,452,57,41,45,58,1160,59,1160,61,41,47,598,41,570,850,499,1126,285,516,798,316,793,121,1124,1149,510,1083,1143,1140,1186,1185,1188,1141,1190,102,1111,1113,526,483,207,67,106,202,66,102,1200,1202,1201,1203,1200,103,48,901,1182,1148,1212,1174,468,1131,1133,1191,1189,1187,1218,1221,1220,102,1145,1147,1214,1211,1227,50,257,195,540,1232,82,1234,1234,805,45,1171,887,1227,259,1176,794,1178,314,1181,1213,351,1184,1222,1219,1253,1252,1136,1193,542,1197,107,1206,1205,1262,1204,1208,1210,1249,1267,1242,1269,327,1216,1254,1223,1273,1275,1092,1225,1268,1228,510,1230,40,1236,1233,1285,82,61,283,1240,1067,1280,265,42,1293,1293,542,452,40,1298,44,40,397,1302,1151,1157,40,56,46,1307,331,58,47,469,1251,1274,1255,1316,1318,1219,1257,595,1259,1261,1204,1325,1207,1209,1280,1279,1330,1270,1272,1317,1276,1319,1317,80,43,70,854,48,1341,1343,683,1344,1342,683,528,1331,1127,528,1284,1235,1286,1288,46,570,46,266,1359,450,1360,905,1270,718,516,959,868,1369,271,125,106,1314,43,1084,1334,1377,1336,1379,1321,510,1323,1263,1324,1327,1266,1365,1388,1329,1389,396,1333,1379,1335,1395,1136,202,1015,360,1400,363,1401,364,294,1390,1406,889,1231,1286,1353,282,47,1248,301,75,45,54,107,49,72,114,50,76,113,49,76,1422,76,119,51,80,1430,80,126,51,84,188,51,85,50,406,1389,1367,269,1370,563,196,115,1374,1376,1394,1378,1396,1186,1381,481,1383,1326,1384,66,1265,1407,1391,1464,1463,1271,1132,1454,1469,1378,1398,79,1403,1474,1402,356,1405,1350,929,49,257,1481,40,1282,1282,486,1442,351,110,49,75,678,463,1493,121,798,935,1038,1444,869,868,199,626,1082,1375,1470,1452,1508,1095,1456,526,118,59,83,114,306,1516,81,111,58,79,1520,79,112,1521,1441,1466,1479,1465,256,41,84,80,65,81,76,63,632,1393,1507,1541,1191,1472,1475,364,1545,1478,1530,371,935,112,111,84,104,1096,1017,1414,286,102,49,70,1495,1563,314,793,122,1498,371,658,42,682,44,805,44,282,45,1145,1168,1153,1387,327,1527,1368,750,1446,207,377,1505,1451,1542,1509,1317,1511,1528,1549,1595,1280,56,292,672,200,228,226,192,1539,1468,1453,1608,1592,1137,1544,1476,1546,1613,1548,843,190,1309,192,1619,1621,40,1620,1623,1622,1624,122,1309,42,452,1601,235,233,193,1557,1488,326,1560,1562,1494,1641,579,1565,794,1568,351,763,81,1353,1353,672,209,672,203,49,1581,259,1583,1445,1585,1661,40,216,192,1450,1591,1667,1256,1112,1529,1281,452,119,108,40,1674,1676,1675,1677,1680,1675,125,1449,1671,718,1308,42,214,211,112,202,199,106,1606,1217,1610,1668,1318,1612,1614,1701,1403,1616,632,246,731,1172,233,387,1328,103,94,74,98,88,72,1636,383,91,48,65,1495,239,57,121,239,51,1726,1728,1727,121,241,59,121,48,257,54,1301,62,52,40,1740,1307,1309,189,1015,1650,1286,672,208,1601,1656,351,1583,661,1501,413,217,193,1666,1609,1698,1185,1594,1685,420,1328,975,546,253,1597,1766,469,1540,1762,1776,1379,1700,1545,1547,1126,1706,607,606,1709,1597,1558,259,93,1721,1723,56,121,432,1794,240,1796,1798,1769,101,88,40,645,78,1748,1354,82,906,1637,347,1755,1757,414,228,203,1761,1697,1777,1273,1765,1596,542,1768,977,650,1771,1773,1828,301,1775,1818,1832,1219,1779,1613,1781,930,1783,1172,1785,387,589,72,43,52,635,103,536,105,231,531,237,43,107,1853,107,236,1854,1858,107,235,42,107,350,91,47,1722,1642,575,1799,1797,1795,1873,977,109,99,40,126,356,1051,82,1881,1883,880,1150,561,1756,1446,520,228,202,1817,1763,1819,1092,1821,1772,526,1824,883,549,1827,1822,1904,782,1831,1894,1833,639,125,43,77,190,43,69,1914,1916,1915,1917,1920,1919,1915,1736,1838,1707,731,1786,589,735,50,969,761,877,969,42,101,350,85,46,61,1792,1871,1943,1769,1876,633,1484,257,1485,264,595,63,1741,58,387,1955,499,331,1738,417,266,1753,1753,47,1810,383,1315,1908,1591,715,100,91,43,81,1973,1975,1974,1976,1979,1978,1981,1977,1983,1980,1984,1982,79,1915,718,1900,1769,547,1903,1898,782,1145,54,1985,1999,1982,2000,1986,2003,2000,86,1969,1895,1137,1278,1905,259,1839,1926,391,1928,842,1930,1932,1934,1933,759,1936,1938,1940,1246,1496,1565,54,1796,122,432,2031,240,2033,123,1945,1877,1829,440,1968,2008,1908,715,101,950,2046,947,860,495,74,1990,1631,1825,1902,1280,570,516,2058,1962,2060,941,2061,516,1788,257,735,56,2047,949,2048,947,992,2007,1909,2009,1146,1350,2013,1784,390,2016,719,1145,48,2019,2086,643,2023,983,489,984,47,2053,1901,882,109,98,1995,589,2041,2075,2043,43,2045,2071,2070,2107,950,2050,2052,2095,1826,1280,935,1840,731,56,734,43,2068,2106,2069,2069,2073,2042,2126,1186,2010,1995,2079,2116,338,2082,542,2084,2087,2020,1934,2089,510,1991,2054,545,118,107,2099,842,2101,2074,1454,2044,1034,1031,2153,1033,1031,1085,75,1366,452,208,196,40,2162,2164,2163,2165,2168,2163,216,204,2114,979,2132,402,2118,383,67,2120,2155,2181,2154,2183,89,93,43,91,2150,2008,2129,1279,337,700,40,2194,2196,334,2197,2195,334,2134,595,282,46,2137,2086,2140,481,566,254,241,2112,653,2145,2147,719,2149,2127,2189,2102,1136,1844,765,2011,1389,2115,2014,606,2177,350,64,43,58,2220,1273,85,44,102,214,68,121,2240,2242,2241,2243,2243,213,67,120,192,59,114,1698,2191,2225,1597,2204,2206,2021,2088,1937,595,516,202,98,42,88,62,42,1992,437,2215,396,1483,2275,1482,2277,941,2278,1483,1017,2218,2221,1318,1988,102,366,2287,639,2288,2291,2290,2293,2289,2295,2292,2296,1777,2223,542,439,439,2039,259,2227,2080,391,2230,371,2232,2234,1777,2297,2314,2294,2315,2298,102,79,2238,207,66,119,209,2323,2325,2324,2326,2329,119,189,58,2253,2127,2255,2216,1148,60,43,45,2259,2138,226,2208,526,71,50,267,249,79,962,40,69,63,2353,62,40,66,59,2358,2360,2359,40,67,2360,1957,845,257,213,1399,1836,2372,78,54,43,727,1127,2283,2220,971,102,254,639,2383,2382,2384,2387,2386,2389,2385,2391,2388,2392,1832,2300,1195,266,225,115,42,227,119,42,1527,2039,2306,2175,390,2309,351,2311,1454,1131,2390,2393,2416,2415,2418,2391,2238,254,2330,2327,2424,2330,2332,2334,2284,2336,2304,1227,1574,233,43,105,234,2435,2437,2436,43,106,2437,106,533,1851,104,228,1100,542,119,78,496,249,81,254,891,1313,843,483,2370,1473,2373,1545,2375,2377,840,2379,2008,1746,110,2470,2472,43,110,221,2474,2383,110,2478,2480,2477,2482,2479,2483,2481,108,2394,2385,1454,2396,1314,331,254,243,46,254,245,40,61,1309,2406,2174,2228,2409,420,2412,1609,2414,2488,636,2481,2484,2513,2512,2515,44,111,2422,122,222,66,2520,2522,2521,2523,122,2327,190,2252,2254,2077,2256,1350,570,1630,40,2536,845,1966,454,121,1988,547,899,2458,632,2460,2371,1702,2373,2465,929,483,2276,2279,2556,2555,2558,2280,2560,40,206,43,72,208,43,74,2566,78,218,43,117,1858,117,2383,2575,2572,2576,2579,2578,2581,2577,2583,2383,113,2510,2395,1885,469,64,334,1061,44,254,244,40,78,1162,2502,2307,2229,2506,2233,2413,2417,2383,104,2580,2584,2582,2609,2579,44,2575,66,124,230,2616,229,66,118,227,66,112,2623,112,199,66,99,114,59,81,2559,2557,2561,2634,1483,1349,2533,2256,45,1631,254,201,1750,2539,719,90,805,254,778,254,220,941,1657,595,2548,2462,2550,2660,2552,2640,1382,1912,1401,81,2571,2573,2611,2670,2610,2672,2580,2586,2417,2490,2589,454,63,2592,2652,778,2598,2466,1126,2302,2540,1767,266,2199,2691,2198,2693,2200,1307,2603,2312,1610,2509,2416,2608,2671,2612,2703,2614,2422,2617,2619,2621,228,66,114,2711,114,200,66,101,115,59,541,2663,2431,510,566,232,230,193,2726,199,2647,542,1960,253,213,40,245,125,602,2688,351,838,58,118,2567,88,43,59,259,2658,1780,2551,2376,2723,350,207,2665,362,2667,2572,2574,2704,2673,2703,2581,2675,2418,2677,2224,1314,1309,254,215,267,216,40,63,1842,1126,1309,267,254,202,245,244,198,542,1965,40,2788,2790,266,2791,2789,2792,1364,383,2507,2699,2606,531,2762,2802,2611,2706,2616,2618,124,2620,118,2714,2714,2716,102,2719,2721,2337,2722,1596,2065,383,1527,249,195,40,111,73,2685,440,989,62,1234,100,43,1037,489,2461,2751,2661,2753,2818,469,2756,77,2666,2668,2761,2764,2763,2763,2766,2394,2768,481,570,242,192,41,245,196,41,1151,840,2780,672,205,246,245,200,1773,2798,1335,2700,2415,2702,2849,2803,2575,42,2878,116,217,42,116,212,42,97,208,42,76,2888,76,512,2405,2841,481,62,387,200,101,42,71,52,2828,1773,570,83,78,64,84,79,64,2820,396,198,1877,58,331,481,66,43,47,74,43,53,2084,2749,2369,2549,2838,1403,2662,2817,2842,2757,361,80,2846,2848,2877,2704,2851,2388,2853,595,206,97,41,216,103,1170,2740,632,2687,2933,259,2871,1378,2873,2392,2875,2940,2939,2572,2668,2370,98,1403,292,2955,842,124,91,267,253,200,220,122,2970,327,1367,788,672,206,2303,842,85,59,2739,930,2750,2463,1613,2932,2754,347,2843,1401,2937,2760,2963,2876,2670,2942,2389,2944,510,597,2358,2348,2995,1182,2957,1508,2959,2387,2961,3001,2877,2965,43,2967,363,2969,3011,396,221,601,254,253,203,237,206,2904,2841,439,200,197,102,203,199,104,2913,2256,984,3045,2091,489,3025,371,2997,362,2999,2669,3002,3055,2674,2587,3006,503,905,2952,2895,1227,3013,1273,3015,2386,3017,3056,2848,3020,3022,364,3024,3063,510,229,189,2270,250,40,241,208,3034,2979,285,3043,3086,3076,718,3051,2936,2938,3070,3070,3004,2489,1609,2491,3049,2979,3065,1317,3067,2607,2962,3095,3072,2968,3090,595,205,104,2270,238,529,188,3085,589,439,2894,2990,3062,440,3046,3089,930,682,49,2186,84,3131,3133,1052,3134,3132,3135,3135,42,84,90,41,82,3142,3144,3143,3145,220,1863,2476,107,2476,108,3094,3107,2962,3097,1895,99,3136,3161,3138,3137,3164,3162,3165,3163,3166,3169,3168,3171,3167,3173,3170,3174,3172,3175,3178,1052,1973,87,2605,2419,2801,3018,3001,2668,219,43,113,3151,3151,2746,82,3179,3176,3197,3131,70,43,61,1148,110,2827,410,207,94,3119,842,244,243,195,1654,55,46,44,718,3088,326,1361,243,58,123,3222,122,244,58,124,3101,542,909,2123,863,109,47,93,214,66,117,3238,3240,3239,3241,227,55,116,1042,110,1045,110,3155,3186,3002,3158,1832,83,2104,3233,2108,2122,3261,3260,3263,3259,3265,3262,811,989,90,3183,2510,3069,3156,2671,3188,43,114,3248,3248,2186,87,3266,3264,809,1844,1538,1465,66,1209,254,209,2597,55,3209,719,2867,197,2865,1308,3217,1021,3219,347,1361,578,1179,107,1131,86,58,42,3230,468,3232,3267,817,109,46,3237,3243,3321,3242,117,228,55,117,3248,3250,3252,3095,2803,3255,1454,3257,2105,3284,3337,3283,3339,3316,3338,3341,860,3269,3271,2701,3274,3055,3276,3278,2474,3280,1112,99,2267,248,244,201,247,243,199,98,41,3342,948,3286,1148,439,240,2172,1753,840,1809,1127,3303,327,3305,463,111,54,69,254,251,953,891,2375,40,355,91,3189,98,638,101,2639,1597,2383,267,257,3397,3400,3399,3402,3398,3398,50,2383,91,3407,3409,2187,2746,91,2186,3413,2187,3414,105,46,98,212,3239,3421,117,3423,3423,226,3326,2476,111,2476,112,2668,2668,217,2572,3435,117,3437,3439,3436,3441,3438,3442,200,3190,2286,2286,2179,3184,3450,2510,101,3410,3408,2187,3407,3414,3458,3416,3460,3415,3462,3459,3463,3461,3464,3467,3466,3469,3465,3471,3468,3472,3470,3473,3473,205,3456,3479,3455,3455,93,2587,3484,2417,3447,639,2746,104,3440,3443,3492,3491,3494,3442,3276,115,3429,3429,2746,2185,42,3408,2982,673,91,41,90,3476,3480,3454,3410,64,3401,3404,3515,3517,298,842,203,85,48,3313,482,3124,396,611,40,203,53,97,193,71,3514,247,60,1063,58,1309,3435,97,641,228,639,1282,1279,3518,3516,3403,3518,51,3485,2295,1139,94,46,105,2425,2328,3560,225,55,120,3433,2964,3566,117,3565,3568,3567,3569,3572,2572,201,3190,1095,3200,3451,2800,3579,2418,1097,2235,2219,3585,1137,2381,3553,3589,3580,3098,1137,1973,104,3573,3570,3597,3596,3599,3571,2572,2452,101,1110,41,99,75,3606,1219,3590,68,3548,3613,3403,299,3127,1718,632,466,206,79,65,2494,267,3116,61,1313,2571,97,3544,102,533,2281,1021,528,2637,2561,3614,3549,3640,2383,3552,3580,2288,1139,93,3557,206,65,118,3649,118,205,64,3653,3655,3427,120,220,2572,3660,117,3662,3664,3661,3666,3663,3667,3665,3668,3671,1398,113,1988,101,3675,2179,3453,2104,2383,3679,3682,3681,3684,3680,3686,3683,3686,2389,3583,3586,3584,2284,1087,3588,2387,3688,3698,3685,3699,3687,3681,3675,3675,685,103,3670,3708,3669,3710,3671,3709,3671,3603,1454,3611,3639,3639,3616,3637,2635,3617,2657,3526,468,1419,72,118,68,748,231,267,449,2917,3722,3634,930,1914,70,2930,363,2383,78,3743,3745,356,3746,3744,3747,3750,3643,3450,3645,1609,1097,3756,639,3757,1096,3758,3761,3760,3763,3759,3759,102,2435,3189,117,3769,215,3253,3348,3685,3763,3693,3777,1609,3696,2386,3331,3253,3769,3769,211,43,115,3765,3762,3789,3764,3790,3793,3776,1777,3717,2120,3748,3799,3750,3749,78,3478,2660,1403,212,1015,3395,3524,3087,3725,469,66,2348,254,218,267,206,40,1960,1038,1746,69,3741,364,3800,3802,3827,3746,3752,2587,3754,3694,2127,3767,105,3569,214,3773,3840,3679,3795,3834,3844,3693,3780,3774,3253,3569,355,115,3778,1610,3797,748,3801,3829,3801,204,356,2888,78,210,48,75,212,52,74,3867,74,214,57,73,210,41,79,3809,3111,3125,3812,569,266,253,205,40,219,114,602,1465,3823,3825,360,3858,3828,3857,3751,3553,3833,3853,1219,3836,3838,3840,3782,3842,3691,3845,3692,3909,3587,2416,3782,3108,3567,3851,3900,1378,3855,3894,3827,3860,78,207,42,79,240,191,51,3927,3929,3928,3930,3084,81,3878,3723,383,3376,454,205,100,42,93,67,3312,3890,1915,3892,3896,3895,3951,3800,3831,2417,3899,3910,1454,3902,3567,3839,3913,3274,3906,3957,3965,3908,102,3847,3904,3107,3850,3787,3917,1508,3919,3950,3894,3922,2888,3926,192,3931,3983,3933,41,3935,3879,344,266,557,554,257,56,3881,526,69,54,41,566,1148,3891,2992,3826,3977,4005,3895,3954,2418,3956,3967,3958,2435,3903,3962,3186,3964,4011,3966,1908,3969,4015,3349,3915,3973,4019,3796,3591,1146,2383,3856,3952,4006,3979,42,78,240,3982,3930,4039,3928,3934,3936,1038,118,114,85,231,230,124,76,69,57,396,86,331,1172,3810,371,4002,3805,3742,4006,3920,1375,3898,4026,1832,3959,3597,3961,3848,3070,4017,3974,4075,1191,4021,4072,3019,4024,3852,4067,3716,4028,3612,3798,4063,3950,4034,78,241,193,50,4092,51,4095,4095,209,41,80,4043,1389,190,188,97,1601,81,73,3202,420,4055,607,285,566,2642,40,4116,4118,452,1646,1773,4060,3825,4064,4032,3749,4008,2394,4010,4076,1186,4069,2668,4071,3970,2963,4074,4083,4139,1610,4078,4136,2849,3972,4082,4018,2075,3976,4126,3921,363,3862,4153,4035,3862,355,78,4102,1280,57,48,45,61,54,48,1738,3946,383,4112,4057,560,267,2652,449,954,4176,449,199,190,3127,4123,4003,4125,3858,4128,2388,4130,4140,1185,4133,2572,4135,4022,2803,4138,4147,4131,1273,4142,4194,3275,4081,4198,1222,4149,4184,356,3922,3825,4157,4159,2039,4170,731,889,1887,869,202,4180,2039,4182,4061,4150,4088,4127,4066,4197,1777,4191,3240,4143,2962,4196,4204,4228,1318,4200,4079,4202,3597,3916,4189,3918,4085,4030,4207,3802,4209,4003,4211,3988,347,4214,506,282,48,61,42,48,562,1446,4219,4181,3948,4003,3893,4225,4185,4227,4235,1139,4230,4193,4239,2763,4234,4243,4236,4199,3912,4275,2762,4145,4271,1191,4206,4268,4208,4266,356,4251,3937,285,4254,606,360,3862,4261,1662,205,191,2979,805,49,355,106,3250,4308,2474,4309,3249,2485,4313,2514,4314,2383,89,4270,2008,1988,97,256,42,122,43,42,246,4326,4328,4327,4329,4332,4331,4334,4330,4330,247,1845,251,356,4340,78,250,4288,4224,90,2704,3842,4338,102,4350,4352,639,4353,4351,4354,4357,4356,4359,4355,4361,4358,4362,4360,4363,4366,4365,4368,4364,4370,4367,4344,2415,2610,107,4247,3827,4342,4342,4344,75,4336,4333,4383,4335,4384,4326,248,4326,4323,1131,76,1698,3590,98,2383,99,2515,4316,2483,3660,4312,4403,4311,3250,224,43,111,854,3287,4293,257,4295,474,4297,4035,2651,869,207,1665,1773,4304,4306,3279,3352,4426,110,4425,4315,4430,4399,4315,4318,3644,2127,4321,259,1911,3641,3550,4441,4440,52,4377,4288,4434,2610,3842,3590,3581,4450,4452,4028,4451,4454,4453,3184,4375,3745,108,2608,122,109,254,41,75,4445,3749,74,3718,4442,3548,483,4392,4394,4028,4396,1046,4432,4480,2474,4402,4429,4484,2474,4407,111,3200,4411,3011,4112,251,334,4493,40,4495,4495,1403,218,74,71,217,72,71,216,71,4505,68,4508,71,109,59,56,2854,3061,978,4517,2954,3939,257,4423,2441,4485,4428,4427,3248,4481,4431,4313,4434,3753,4436,43,4322,257,4439,4471,4440,3549,4444,4345,4207,4447,2580,4449,4456,4547,4455,4549,4457,4551,4548,2510,4459,3747,223,190,1601,254,40,671,4542,3750,4470,4472,4566,4539,4474,43,4393,2127,4395,4397,4528,4432,4483,4526,4578,110,4487,4489,3101,483,1950,1948,2062,40,3949,364,101,2747,3882,40,204,66,104,1207,4598,1461,4599,103,66,46,368,526,4304,2563,109,3660,112,4610,4612,43,4611,4614,4610,2383,112,4618,4620,4614,4621,4619,4622,3190,2383,94,4319,2075,4437,4536,4567,4538,3401,4541,4224,4637,3800,4544,2581,4546,4550,4553,4644,4643,4646,4552,3579,4555,3744,3282,254,99,103,4560,4467,4563,4469,4634,4633,489,3200,4571,2284,3590,4398,2511,4625,4624,4670,4623,4618,2571,4615,4675,4613,4675,1045,113,2179,65,4058,327,570,4589,360,4591,2748,468,570,203,4596,1385,1460,102,4603,4605,469,4304,203,3190,3600,3598,4232,2581,3581,4188,1379,216,43,2881,4711,4710,114,2566,77,530,77,2383,4719,1912,4720,4723,4722,4725,4721,4727,4724,4638,4563,88,2704,116,2383,4734,4711,4735,4738,4737,4740,4736,4742,4739,4743,4741,4744,4747,4746,4749,4745,4751,4748,4752,4750,4753,4756,4740,4650,4468,4064,4728,4726,4724,4762,4765,4716,3772,99,3435,4712,116,3715,1609,4453,2487,3904,3772,4704,4779,3276,117,2232,1226,4412,3938,266,1545,4154,1701,4688,4593,4692,4597,4695,1324,72,3523,481,4700,4702,3601,4780,4705,2577,4707,1777,4710,3597,3435,114,360,1851,4730,4814,4760,4088,4732,4804,4282,4819,4821,4201,3002,4376,4658,4816,4815,3801,2569,4768,3569,4773,3854,4547,4776,3913,4778,4703,4781,4783,4683,3811,4588,1402,45,76,241,3982,4848,51,3885,80,4687,4592,4690,266,4793,4694,1459,102,4797,53,4799,367,4701,113,4839,3567,4820,4806,1832,4808,3434,3277,4812,4826,4877,4828,3895,4818,4823,4820,4882,4822,4883,2704,4825,4879,4827,4468,4830,1046,4832,2104,4084,4455,4836,3348,4838,4802,3569,3769,4841,1126,83,51,62,104,55,74,107,56,76,4912,4914,4913,4915,4915,3122,542,4685,1613,4040,51,3819,2659,4791,4690,257,4858,4795,1263,4862,4864,49,4866,4868,3597,4870,4629,1335,4873,3441,4811,356,4813,4890,4878,4207,4881,4886,4885,4953,4884,4201,4888,4948,4889,4345,4892,99,4894,3604,4774,4835,4072,4900,4803,3597,4903,2532,930,109,58,78,4859,4859,3372,842,4922,364,3862,219,71,68,219,70,68,3084,4590,4855,3125,4930,4693,4932,1325,4934,4606,4865,4801,4969,3569,4940,4435,4872,3567,4810,4876,4959,5010,4816,4951,4954,4952,4955,5015,3848,4957,4949,5020,4637,4961,4963,4896,3590,4898,3253,4968,4703,4971,4784,718,4915,4977,4695,4979,719,4981,4589,4928,469,2465,5043,2376,1328,5046,1153,3995,286,4800,4867,4901,4802,5004,4532,5006,4809,4875,4946,5021,4958,4064,5013,5016,5014,5066,5065,4824,5062,5061,4006,5023,3567,4833,1335,4775,4967,5053,4779,5031,542,45,257,5083,4117,5084,257,99,55,73,2628,101,5035,1325,5037,4921,4787,4290,4991,4689,2933,5051,4938,2668,5055,3832,4807,5007,5059,78,4947,5071,5011,4817,5017,5067,5116,5068,2962,5019,5114,5122,3894,5073,3597,5075,4244,4897,5078,5002,3567,5081,526,528,2838,310,99,2812,2717,5094,1328,589,570,4157,5145,4291,5147,3863,5148,5041,1671,5103,5079,5003,4705,4871,1454,4943,3443,4945,5111,5113,5070,4032,5064,5118,5167,5117,5066,5121,5164,5164,5125,2668,5127,3975,4966,4777,5154,5132,2572,4904,469,5135,2373,5137,5139,5093,4996,5142,4980,1962,2636,5194,1947,4422,5000,5052,5131,4939,5156,4941,1378,5159,5008,5060,5123,5163,4005,5166,5169,5119,5212,4952,5171,5209,5208,78,5174,3602,4895,4965,5129,5179,5200,4840,4972,454,5185,2660,5187,2712,2813,4601,4601,5191,5038,5049,2723,5153,5226,4821,3581,3807,102,2370,5246,639,5247,5250,5249,5252,5248,102,240,2572,5256,117,5256,114,1853,78,245,5217,3827,4407,78,5267,5269,356,5270,5268,5271,356,227,809,530,117,5278,5278,635,5213,5283,5168,3095,5258,5280,2572,5278,3544,107,5272,5293,5274,5273,5296,2476,5218,3894,5262,239,1046,5258,5258,3807,101,5251,5254,5308,5310,4644,5027,3095,5029,5079,5133,5184,257,2838,2888,77,2891,3528,1527,5325,266,2985,782,4520,3127,5241,4938,5106,4645,4453,2610,114,5172,4225,4686,363,3807,88,3596,3437,5285,5347,5214,2582,536,4969,3772,107,5341,364,4701,5299,4288,4667,4448,4648,4552,5313,3107,5315,4969,5317,5229,5319,5099,1704,1227,5330,2039,5332,5180,4884,4647,5335,2670,5338,5265,4006,5355,360,5343,5345,5349,5284,5389,2576,5351,3596,5353,5385,356,5357,5339,4224,5360,4545,5362,5312,5130,4938,5368,1150,5370,4223,360,5372,3375,5239,1126,555,75,1301,5417,40,5419,5421,5418,5423,5420,1301,804,5198,5104,5243,5403,4643,5337,5399,3894,5396,78,5387,4802,5346,5391,5441,5068,5393,4802,5395,5099,1403,5398,5383,4032,5401,4641,5431,5077,5225,5406,5182,5228,5134,1951,1947,528,5463,1465,5374,1021,2320,2601,390,2194,5427,4936,5001,5333,5202,5380,5432,2580,5382,5358,4637,5436,5438,4779,5440,5390,5487,5348,2583,5444,4779,5446,5410,1613,5449,5481,3858,5452,2577,4642,5454,2800,5364,3001,5366,3596,5407,3127,239,238,189,242,4037,3534,54,4843,1279,5468,2408,338,5471,301,5376,5200,4820,3701,5527,3700,5529,3702,3686,4736,2577,5480,5434,646,2383,80,5538,3839,80,5541,5543,646,5544,5542,5545,646,2571,90,1045,117,5552,4874,5488,5442,5285,5491,5552,5552,3189,108,5546,5564,5548,5547,5567,358,5539,5537,5571,2351,5383,5499,4574,5531,5528,5577,5530,3688,4825,4837,5377,5227,5032,468,86,73,40,93,79,40,98,81,40,101,83,1182,250,250,198,1601,73,65,55,5517,1905,5519,2504,5521,394,5050,5428,5584,5557,4953,5535,5209,3382,4442,2135,2747,1095,3769,5486,5489,5627,5067,5491,2044,1087,2923,85,1297,4566,2496,5574,5628,2763,5533,4899,5615,3770,5458,5586,440,194,114,40,214,4302,5651,40,215,4421,1227,57,51,47,56,5659,1531,5607,1597,5609,5469,2695,5472,4937,5643,5639,5116,5618,5358,5620,3640,5622,2720,1092,5625,5616,5556,5283,5630,5222,102,5633,5635,4440,5637,5497,4479,5682,4739,5583,5242,5644,4782,5459,440,195,5649,5653,5653,5655,1995,5466,843,5666,5520,5522,5613,5473,5199,5475,5683,5673,5536,5676,3515,5678,5624,3442,5672,5694,4804,5685,4964,5687,43,5634,595,296,5690,5536,5575,5441,5641,5028,5643,5508,396,189,109,1663,1760,216,1760,219,2824,1279,5708,632,5710,5610,5712,259,5524,4703,5725,5065,5674,5070,5720,3403,5722,5680,5724,5726,5717,5727,3567,5631,639,5688,5733,5636,5736,5761,2580,5739,5314,5741,2572,81,65,64,3534,40,5789,5791,64,2776,55,4684,4516,3374,5752,5414,930,5755,2307,5757,4521,5614,5697,5780,4821,5763,5071,5765,3404,5767,1137,5681,5771,5817,5118,5728,5632,5731,5689,3518,5691,5339,5737,5771,5782,5365,5643,2882,118,1063,1769,192,2978,3011,5753,902,80,1301,2692,2695,5843,824,327,5759,5079,5808,4884,4736,4776,5853,2383,5854,43,5856,5858,5855,3106,972,2383,86,5863,989,86,5866,5868,972,5869,5867,5870,972,94,809,5723,3492,5850,5879,3904,5820,639,495,99,5871,5886,5873,5872,5889,495,5864,5862,5893,4818,5859,5857,5860,5897,5899,5896,4776,2518,5726,5829,5505,5831,42,5833,767,977,198,189,4785,5839,5329,3047,490,3126,984,5669,5474,5377,5880,4201,4736,4529,5927,4575,2435,2383,4818,5932,3340,88,98,990,5877,5626,5770,5924,2877,5882,102,5884,5934,86,809,5931,5949,3479,5928,4400,5952,4624,5818,2581,5905,3055,5506,5439,5908,5834,5911,5913,5838,5800,5375,5806,5716,5941,3840,5926,5929,5952,4315,105,5950,5932,5936,5935,809,5980,5983,5982,5985,5981,88,5875,89,1338,1098,639,2668,4808,5971,5956,3913,5728,5991,1085,99,5984,5987,6003,6005,809,1014,5932,5950,3455,5975,5974,2481,5955,5808,5958,2877,5960,5485,5962,5910,882,5912,5914,5967,301,215,213,124,2865,2546,1596,5848,4969,5996,3848,4736,2675,6039,2585,6041,4626,6043,6040,6044,2383,4464,43,3483,6049,2383,6050,6053,6052,6055,6051,6057,6054,4534,4554,6036,5940,4136,4546,3679,6059,6067,6056,6068,6058,2383,4478,6045,6074,6042,6075,6046,3277,5880,6017,2848,6019,3569,5832,3624,1769,6024,5966,782,6028,1794,673,2780,1249,6034,3596,6062,5997,2941,5502,5478,6063,6099,4821,5501,5477,3485,3273,6103,4820,6081,2849,6083,5181,117,1164,69,5047,936,4120,1156,2656,2979,5915,570,1151,5915,3231,5969,5923,6110,6132,3255,6101,6061,6132,6104,4201,6106,5379,3579,6109,6138,4952,6112,2762,6114,4970,5645,4842,904,4785,396,6096,5054,6137,5971,6134,6107,2800,6144,6157,6064,6135,4028,6143,6098,6037,5405,5377,5742,4252,351,6128,2663,6155,4779,6168,6063,6159,6141,3485,6162,6184,5526,6165,6142,6179,5851,6170,5200,6172,6153,6152,929,682,46,3767,93,6199,6201,6049,6202,6200,6203,6206,6205,6208,6204,6204,4591,91,5670,5807,6163,6162,6181,6187,6189,6220,2764,6140,6219,4668,6185,4953,6146,2671,6148,4781,838,99,6210,6207,6234,6209,6235,6238,6237,93,854,4110,5413,1182,553,46,5934,5934,5670,116,2571,6251,4711,6252,6255,4755,6257,4754,6259,4757,6260,6258,6261,6264,6263,4758,5725,6262,6269,6265,6270,6266,6272,6274,6271,6276,5616,6275,6273,6277,6279,6279,115,6281,4735,3772,6253,6288,6256,6288,3769,1014,97,6248,3341,1131,60,2553,3124,439,5330,6246,6295,3365,811,6214,5970,6216,6221,6226,6311,6310,6313,6063,6228,2672,6230,2572,6292,4534,6304,3259,6297,5143,266,101,85,40,102,86,40,104,87,40,105,6334,1069,452,229,124,42,218,109,4168,1505,46,838,98,6348,6350,3021,6351,6349,6352,6355,6354,6357,6353,6359,3021,6307,6131,6312,6309,6365,6364,6367,6314,6226,6316,2609,6318,5698,6001,6360,6358,6356,6376,6379,6378,3021,2920,2835,5238,40,218,2824,5704,4302,213,4220,347,75,1741,254,247,2270,427,5096,420,6197,3853,6362,5525,6366,6369,6407,6406,6409,6368,6227,6191,5030,2572,1338,5729,2220,2232,4682,5192,3886,6388,5652,6390,6392,327,115,2452,254,246,2270,429,501,1374,46,6403,5922,6405,6411,6440,6408,6441,6410,6442,6111,6413,5316,6415,5686,6418,43,6420,6385,5750,5650,6424,571,6426,285,725,496,893,4418,6434,6346,6437,5715,6363,6445,6444,6471,6443,6473,6470,5640,6447,5367,6449,6417,3966,6419,6325,40,1503,1283,113,40,191,110,40,190,6490,326,81,56,41,2653,2774,6120,6435,6467,5429,6474,6472,6475,6506,6505,6471,6371,2582,6373,3769,6416,3693,6482,5373,2740,439,252,204,2858,192,2989,6466,4140,6404,6503,6528,6469,6508,6504,6532,6507,6533,2671,3437,4703,4710,6253,5697,6529,5698,6514,4067,6516,6244,966,266,241,121,2562,93,1183,283,6502,5643,6542,6503,6534,6560,6531,6561,6367,6537,5079,6539,6558,5784,117,6544,4236,6546,3373,3124,88,382,66,5612,6525,4279,639,6527,6557,6584,6439,6563,6587,6562,6589,6184,6565,4969,6567,6585,6503,6513,6450,6481,6452,6299,383,3387,5328,6580,3693,6583,6541,6595,5849,6590,6588,6535,6613,6310,6592,3596,6594,6608,6619,6597,6480,4147,6573,1126,6175,1250,6555,6526,6438,6568,6619,6097,6611,6634,6533,2421,49,4444,6638,254,6640,6642,6639,6644,6641,4444,2879,6612,4883,6616,4802,6618,6631,6414,6570,6598,6623,6600,6517,1182,6402,6629,6468,6632,6609,6035,6635,6649,6309,44,4655,49,748,6673,6641,6674,6677,6676,6679,49,55,254,6648,6668,4822,6651,4779,6653,6666,6655,6571,6451,6453,6574,6661,6628,6581,3039,6630,6690,6701,6614,6685,6614,6671,6680,6678,6675,6709,6708,6682,6684,6703,5283,6687,3569,6689,6665,6192,6479,6515,6659,6547,1227,6662,6698,198,4614,3807,115,6730,6732,3787,6733,6731,6734,6737,6736,6739,6735,6730,3772,115,6743,6745,3787,6743,2383,6284,3787,6749,6752,6751,6754,6750,6756,6753,6757,6755,6758,6761,6760,6763,6759,6765,6762,6766,6764,6767,6770,6769,6772,6768,6774,6771,6775,6773,6776,6779,6706,6681,6641,6682,6782,6785,6784,6787,6783,6683,4736,6777,6792,6779,6778,6795,6793,6796,6794,6744,6747,6801,6800,6803,2370,6740,6738,6741,6807,6809,6806,6739,6805,6692,6599,6694,6625,6026,2040,6697,4285,2075,1097,6308,6714,6669,6368,6781,6708,6829,6707,6789,6713,6826,4072,6716,3567,539,111,6821,1591,6624,327,75,3998,195,89,44,500,469,6626,326,6726,6840,1777,6823,6530,6825,6704,6220,6828,6831,6710,6862,6712,6858,6715,5377,6838,6854,2075,6842,2749,266,236,3885,3029,109,97,69,6850,6818,396,6853,4278,1095,81,1936,78,41,100,6889,100,1335,6856,6586,6859,6897,6185,6861,6863,6901,6711,6683,6099,6648,45,2575,6907,254,6909,6909,5682,6836,3597,6869,6885,3910,6872,485,266,245,219,267,251,109,196,3355,4593,6196,6820,6917,1137,6887,2382,673,672,202,82,1108,1317,6895,5760,6898,6834,5940,6900,6830,6902,6832,6099,41,6284,2616,2707,6955,314,5850,6914,2668,6916,6698,6693,6548,40,246,218,6497,2498,204,3114,6929,902,570,226,2773,6975,40,228,3084,232,208,52,6981,52,122,85,78,3974,6934,1654,2865,6939,1508,6942,6610,6866,6945,6364,2518,45,4347,7001,6910,7002,7005,7004,7007,45,4318,6833,5391,6952,6955,6954,6954,6957,6913,6868,4408,2043,45,102,245,235,45,7024,7026,7025,248,242,44,2074,6919,1961,40,240,202,6497,899,119,6887,285,84,3311,7044,3889,3525,843,1151,1889,271,191,93,74,6870,1273,6995,4969,3495,3493,3442,7060,7063,2572,235,5389,7064,7061,7069,7060,5555,7068,7073,7062,3442,4808,7074,7070,7075,7079,7081,7078,7083,7080,7084,7082,2572,2370,3331,7013,7015,6030,7016,1794,6536,7085,5109,7087,7081,4938,6961,1698,81,2421,770,252,40,7033,6723,4843,224,110,6497,2654,80,2599,554,2493,236,47,254,237,1173,7048,5919,5134,1631,1662,410,7053,7055,6932,1507,7058,6654,6666,2847,5487,7136,6719,7140,5159,7140,7144,6702,6503,235,121,189,6937,7148,189,4014,3156,7013,63,2031,7157,254,7159,1725,4283,7146,6702,7102,2127,7104,2382,7106,7108,6918,7110,347,4696,6497,3885,2917,2377,68,6395,243,4260,1055,7180,2377,570,3772,80,7188,7188,1879,5646,350,7050,7129,7052,7054,7056,6941,5993,7164,7141,3000,5683,7145,7203,6719,7143,7202,7206,7211,4802,234,116,188,1601,234,117,188,7154,5212,7212,6719,7166,2284,7168,884,7107,7109,6816,327,56,331,218,120,2951,286,74,3294,550,7239,7186,5098,1701,4325,66,5229,7128,869,7131,6854,104,5464,5462,5461,528,1230,42,358,2759,7207,6631,7138,5285,7223,7266,6652,7210,7269,7262,5831,6952,216,6952,2882,115,7221,7139,7270,6503,3807,94,112,3201,7254,7286,5461,73,5731,1219,6934,3608,105,7293,7295,41,105,7230,2647,3308,3301,286,69,2903,1368,449,7304,7243,4844,7245,43,7247,1150,1631,2682,961,444,416,193,97,73,7252,5369,42,355,82,7267,5697,7264,5067,7328,7332,2572,7209,7271,7336,7333,6619,4274,7331,7280,5643,3807,97,114,2834,454,5633,7199,1137,7034,6883,2493,210,267,7355,56,5426,6920,7310,1403,7246,2854,489,2118,46,3791,7323,5408,7325,540,7338,4703,7330,5283,7373,7342,117,7335,7377,7337,7378,7278,7265,7383,5377,7344,7346,6384,396,7349,7133,1222,7352,468,236,189,41,232,188,1294,1488,5039,363,7363,2148,6931,6962,1377,104,7324,7326,7381,3596,7375,5118,7414,7270,7380,7386,7382,7422,4703,7340,7376,7421,4703,7388,7347,468,77,1974,7350,1087,7395,440,123,495,118,1988,4843,1545,7406,2217,7408,7199,7411,7370,7413,7427,5079,7416,4954,7418,7422,7420,7423,7451,7458,4070,5389,7455,3569,7429,7390,420,1338,6988,7393,1318,7436,396,1308,4117,1581,7404,364,7444,542,6884,7409,1452,7448,4993,42,3807,82,3784,6319,7490,5698,7489,7492,7491,7493,3769,7374,5389,7496,7495,7501,7494,7503,7500,7504,7502,7505,7505,4781,7508,7507,7512,7506,7514,7511,7515,7513,7516,7519,7502,4778,5489,6655,7520,7517,7514,2966,115,7430,440,7468,7434,639,7472,6421,1403,5321,121,42,66,2954,2954,6883,7446,7470,1134,7484,454,658,51,3704,2104,7552,3676,7553,7556,7555,7558,7554,7554,6718,3330,4820,2675,3698,7560,7557,7567,7559,7568,7571,7570,7573,7569,7575,7572,7576,7574,7577,7580,7579,7582,7578,7584,7581,7585,7582,3678,5530,4655,4822,4703,1111,100,7587,7596,7557,282,597,526,7532,7546,1191,7535,6385,4416,76,2714,220,66,111,4793,7613,4596,123,61,973,6401,7545,7482,1189,7548,468,2468,2075,7457,7453,4015,3333,7603,7621,7631,1507,3105,3185,4955,4703,5176,1591,2430,7467,356,7533,102,7605,5097,7310,5321,7609,7611,4859,122,7617,7544,6436,7633,1190,7623,6819,1590,3586,7627,4953,7630,7632,7666,7644,2872,2800,6167,3904,7638,6657,7640,5700,396,7602,7667,7394,7173,3123,7648,42,77,7650,111,7652,7654,7619,7656,7679,6933,1100,6934,6934,6939,105,5798,7619,7661,3844,7663,5065,7665,7668,7657,7692,1095,7635,7671,3913,7673,6622,7675,7193,7642,7469,7708,7604,7681,481,838,54,90,43,55,7725,7727,7726,89,42,55,4416,7685,2712,7610,7687,4695,124,278,7655,4235,81,7022,254,248,267,7747,7746,7748,7751,7750,5237,6852,1506,1191,4340,102,249,639,7760,7759,7761,7764,7763,7766,7762,252,2572,7769,117,7771,7771,2437,7526,7525,4866,5947,6330,639,838,7719,7783,7706,1223,1097,7779,7779,5936,104,7525,7516,2668,7773,7770,7796,117,7760,101,7762,7801,7765,7802,7767,639,2286,1139,7641,383,7678,7350,7646,371,3575,74,2838,645,69,7401,68,2521,112,216,66,108,4859,7740,88,7742,7470,7744,7169,2112,427,7754,347,7625,6165,2849,2434,7336,3575,113,7785,7845,7707,1095,3594,7140,5939,4276,5431,7807,1136,7809,350,7811,7847,7534,7721,526,7815,2838,4216,40,194,64,97,192,63,94,7870,94,188,62,89,7875,89,113,58,647,7690,7743,7745,2143,1063,7836,327,7838,6160,3781,2762,7841,7140,7843,7846,7784,7859,1379,7849,6702,7851,4348,7853,1191,7856,371,7858,7898,7351,7861,469,7863,2373,6930,7691,4131,7832,2271,1059,7888,681,7756,1223,7839,7893,7202,7896,7899,7897,7785,7901,7207,7903,2670,6223,4454,7854,2128,7676,7717,7644,7813,351,7914,2660,7916,7884,7833,1992,7835,6123,259,7890,6182,2387,7840,7928,3576,7930,7961,7910,1273,7933,6631,7935,5361,5477,7939,1095,7907,351,7909,6870,7944,326,7946,1545,7948,7831,7885,7834,6500,350,7955,5502,7958,7842,7960,7963,7962,7931,1092,7965,6666,7967,5402,7969,7906,7941,7810,7643,7962,7976,347,7978,1613,7980,7692,1097,117,86,81,8012,8014,8013,118,2006,98,6331,6349,4517,7985,7924,1139,7926,2671,7894,5377,4710,109,2566,75,8033,8033,1879,7541,7256,8039,7255,8041,7287,8042,8040,8043,8046,8045,8048,8044,8050,8047,8051,8049,8052,8055,8054,8057,8053,8050,63,2340,8035,43,8034,8064,3807,93,4938,7997,5453,7999,1223,7972,326,7974,7707,8005,327,4701,75,5146,5149,8083,8009,7533,7659,7544,7701,1095,8027,2672,8029,5200,8031,1545,7818,6151,6194,1995,1145,46,1545,7282,8069,4016,7905,8073,8001,7857,8003,7991,7911,7231,481,7257,1949,8117,4587,8085,7961,8087,7700,1185,8091,2609,8093,6538,43,109,8096,1989,6173,8098,1350,8101,8103,43,94,8105,4073,8107,7808,8109,7908,8111,7812,7912,2547,6882,7883,7992,531,481,7986,6160,7988,4938,8095,1613,8097,8133,8162,3127,8136,1613,2370,91,8140,4233,8142,7855,8144,7973,8146,7899,8078,6972,2378,7620,7369,4993,41,109,7312,124,8129,8186,109,8188,8188,6047,8192,8129,8193,6048,8196,8195,8198,8194,8129,2370,109,121,8129,8204,8203,8205,8208,109,117,1043,3767,59,8213,8213,685,5606,8163,396,2777,41,2902,7237,8134,987,43,639,2747,8215,2747,113,4570,8206,8234,8209,8206,119,8200,8197,8239,8199,8240,8243,8195,4325,8189,8187,8248,109,7346,82,1014,52,454,8076,7910,8177,4856,4561,2355,72,2355,7233,843,7481,7447,7412,7372,6996,5334,2389,191,1593,1670,8219,3724,2736,207,41,253,229,4166,8150,8099,542,1907,1136,2452,4455,4823,6914,7465,8255,8175,8112,8258,3880,6456,8299,4052,8265,8180,7657,8122,527,4326,7450,6667,5378,2587,8273,1380,8275,8285,526,1753,254,239,7748,54,82,1164,8225,1182,8287,1186,8289,3590,8291,5079,8293,468,8256,6821,8297,396,570,6389,40,4109,8302,7917,8121,8268,7327,5079,5288,5279,5289,8350,8349,8352,8348,8204,102,8238,8356,639,8357,808,8313,1194,8315,469,2210,7123,2497,6332,71,6345,8276,1406,8326,1095,5991,8357,8377,8359,639,5351,8348,8382,8351,8348,7428,4534,7389,8294,7718,8147,8114,3302,266,8339,8341,632,8266,7859,8305,966,8307,8269,7460,2668,495,6822,639,6322,3343,8410,6305,809,495,2159,257,1768,275,3732,94,65,8371,719,2920,58,8409,8412,8427,3283,3345,2008,5554,7378,8332,7531,8295,7975,8148,6973,8394,6457,8396,902,8398,7991,8400,347,290,7371,8346,8404,2572,8406,7134,3258,8411,8426,8457,863,2110,4172,788,6499,2777,843,8424,8458,8428,8456,2106,2125,2075,8432,7460,8434,7677,8436,8077,8438,5329,8440,8299,8442,782,8444,8181,396,8448,8308,7328,8453,6855,8455,8468,8494,8467,2049,2567,285,213,105,42,247,7038,6400,8423,2233,8496,8469,8495,863,8471,1507,8473,7223,8475,7942,8004,8479,6483,8339,76,5793,8397,8303,7898,8446,327,8488,8403,8490,2008,7787,3021,5947,8020,8534,8537,8536,8539,8535,8541,8538,8542,8540,8543,8546,8545,8548,8544,8550,8547,8535,366,1016,301,84,1166,206,2900,718,2232,59,8551,8549,8552,8566,8565,8568,8564,8570,8567,8571,99,1591,8514,7270,8516,8002,8390,8176,8519,420,483,7104,40,5841,8586,1301,1988,40,76,66,5420,8593,2367,8443,8525,4285,8527,289,8402,8450,8531,8112,6821,7289,2816,1243,452,597,3295,481,2232,60,7993,7482,8576,7422,8578,8110,8580,8296,8582,3938,257,476,606,8120,8605,8153,7449,8530,7378,8491,8630,7692,8607,326,964,902,8614,8616,3853,8618,7206,8620,8145,8622,8437,8392,6850,8626,4215,6725,8598,7603,8600,659,8602,7338,8635,8643,3966,8638,1389,8642,8152,7692,8645,7202,8647,8174,8649,8478,8651,569,8653,506,326,115,113,85,1654,1715,69,8154,8656,7719,105,8345,8661,8668,4131,8665,1280,8667,8636,4235,8670,7336,8672,8075,8477,8257,8624,2368,475,8654,6427,112,84,8684,89,8686,1195,8058,8056,8059,8718,8720,5460,7259,1912,8063,8065,8726,8725,8728,8064,8729,8726,2375,1294,1737,8025,8693,8664,540,1038,8697,8663,3844,1145,8038,1947,2370,5219,8730,8749,8727,8750,8731,8753,4570,8388,5408,8719,8717,8759,8758,8050,8640,510,483,8627,474,8639,266,1527,2458,566,6851,8372,8448,5436,4589,1570,259,7550,8742,1908,8695,1017,8741,8737,4147,2920,5646,2837,5447,8791,78,8756,8364,2553,8678,8628,420,224,223,5833,2782,71,63,5516,8372,2547,4326,2461,8810,1015,8811,79,8813,8815,8812,8817,8814,8818,8778,257,8780,8786,2220,8783,1270,8785,8698,4067,8788,285,2571,81,8816,8819,8836,8835,8838,8818,116,8706,8807,4980,8797,8767,420,230,230,2031,254,208,72,64,8218,8795,6973,5917,7126,5918,8858,5917,285,2118,50,8781,3586,8826,3012,855,8866,3844,8831,373,8861,8860,8876,8859,3126,8324,3218,8845,391,8880,8843,440,8864,8871,1698,8868,929,8828,8888,1777,8873,8856,8896,6964,2954,4920,8885,8884,351,8887,8824,8738,8608,8827,8870,8905,8787,8173,8902,4683,8773,8897,3879,8904,8829,6698,8890,3064,8909,8919,3693,8895,8913,8901,347,8915,8927,2216,8918,8893,2075,8921,1127,8892,8910,1698,8926,8928,8916,4786,8943,8931,8863,806,8934,1591,8936,840,8938,8924,3910,8941,8945,8942,8768,8957,8960,326,8933,8939,8867,8739,8666,8923,8949,8894,8912,8958,8972,7035,8946,8973,259,8963,8954,4147,8951,1126,8953,8969,1508,8956,8975,8896,8930,8976,2841,8978,8984,1335,8981,930,8983,8964,2075,8986,8990,3937,932,940,938,936,934,7953,9001,8098,8992,8998,8950,8966,8696,8968,9012,2127,9000,8961,3879,237,895,5834,1062,9025,40,193,1309,194,1309,3737,8987,3101,9011,8979,8782,9014,8784,9016,9036,8955,8971,9020,2933,237,6463,7886,429,2193,334,1361,9033,8372,9035,8993,1317,8995,8561,9040,9056,8985,9043,632,2780,331,1303,9067,1306,9053,327,9046,2213,430,9050,1362,9044,9010,8948,9017,3844,9058,1021,8997,9041,2284,9019,840,203,6551,8339,5653,84,71,9077,420,9072,7920,434,9075,9052,9009,8942,8878,8875,9104,8877,9105,9108,9107,9110,9106,9112,5465,9109,9113,9111,9115,9118,9117,9120,9116,5920,1389,200,118,8299,8339,9093,9095,383,9097,9048,5611,9076,9070,9136,9102,9130,9137,719,9125,9127,6457,9129,9140,259,9132,9073,9100,8284,9146,9138,9152,9139,9001,9089,6422,9158,6455,91,77,9155,351,9148,7920,9150,9163,9154,9169,9153,9171,8298,3374,7699,2056,5797,9177,7035,9174,1126,235,2652,9133,9167,9170,8960,439,2458,334,9168,9172,9186,2039,710,5844,2694,5843,2194,106,2918,1021,9182,9073,434,615,337,9101,9191,9130,88,85,3382,673,206,202,1864,9192,9218,9209,3011,9195,5520,337,9200,930,9203,9098,429,9193,9219,9230,9220,9231,2841,9222,5610,9224,9201,843,235,6463,2596,2595,267,9243,9246,9245,9233,9249,9232,9251,9234,1597,9236,5667,9225,718,7542,5327,9260,4517,9069,347,715,52,8080,9267,8064,9268,75,9270,44,9253,9252,9250,9274,9277,510,9255,5520,9257,2819,2740,1085,53,5355,8227,9276,9289,9275,9291,6173,88,5786,87,1534,6604,526,9280,5610,9282,1466,1558,9285,9287,9278,9292,9290,9307,8885,2865,6937,4121,9299,9237,390,9302,1148,9304,2924,9306,9309,383,2059,9323,9308,9327,1270,212,212,112,209,209,1490,6818,9300,2307,9318,5465,9284,9321,8792,9288,9308,4167,6937,5600,2786,9310,9326,9350,8931,105,331,102,9355,9357,6329,9358,9356,9359,5790,7359,9303,9341,9286,9343,9352,371,9346,254,206,252,252,202,9328,9351,9378,9377,3218,9366,9322,9377,9175,9380,9369,9379,9387,6601,326,3257,54,3786,78,9394,9396,356,9397,9395,356,9344,9389,9403,9388,9405,9386,1406,8989,9406,9404,9407,9412,9411,8393,8364,439,85,52,63,9418,63,89,52,65,88,9424,9426,9425,9424,9298,9410,9432,9413,9433,6173,9409,1017,566,5094,1324,942,9435,9443,9434,9445,2663,9437,1270,9439,4996,9441,9151,9414,9444,9454,9446,383,3807,91,3786,90,9459,9463,2187,3839,3237,6049,355,90,8959,3524,9450,4860,4978,2740,1298,1298,9381,9179,9261,2862,9456,9483,9455,9209,3631,2342,641,1048,9471,8372,9473,9440,1201,9442,6873,2781,202,672,201,6626,62,58,9143,8299,5748,9485,9457,5752,8862,9484,542,9487,2260,2343,639,9490,8929,9453,1466,9493,9451,1201,7888,570,218,216,123,9527,122,9502,57,9505,5653,223,199,9508,9512,2841,90,85,3612,788,227,225,121,3011,1570,2118,2120,8227,553,44,1572,682,45,1238,9553,1148,9514,9516,2138,1042,803,9519,8364,566,205,66,105,9569,9571,9570,9572,9575,9570,7922,1270,62,56,9534,4302,9536,9538,9585,1279,9541,9543,203,9545,120,2723,1282,1806,9595,540,106,43,67,1148,5276,9562,2019,9564,9491,8364,9174,5797,3048,1596,61,5795,5706,9614,1665,224,200,9586,9539,2216,2057,9261,9593,1409,1807,9596,1807,8184,8715,1406,9602,9488,639,9605,9566,9308,115,6839,112,107,3935,6818,483,9259,8023,9620,9509,9647,1811,9625,9627,1353,7284,70,9560,9515,2137,4407,2262,5796,9432,672,207,6937,2788,9648,9619,9668,9258,257,1881,9652,1286,7346,717,1465,1849,2446,2446,1849,9681,2435,2434,105,533,9606,9275,122,118,88,4045,85,9431,9667,9695,9649,782,528,9672,1410,9701,1807,2744,73,8914,9520,9696,9669,9697,9457,9699,9702,9627,8238,2051,8885,9448,9709,9719,9708,9232,9712,9626,9713,1286,8186,76,9706,9720,9710,9731,9730,5916,8591,2924,2923,3868,1845,854,52,9740,1131,51,735,51,1145,4698,3524,9718,9721,9732,9751,9733,9729,8796,9121,9752,9758,9754,9759,9319,5088,8507,9764,8425,9765,808,9766,9769,102,1571,6695,2456,7317,961,269,218,1816,259,5947,54,2746,9782,43,9784,9786,1145,45,9753,9790,9761,9792,8306,3388,8792,360,216,42,81,9773,3732,1446,219,9618,259,3478,76,2838,1014,8806,9760,9812,9140,9325,9791,719,528,4157,5355,9798,9800,6817,892,869,219,201,286,9807,9809,9785,9816,9832,9219,253,6520,1654,9578,8364,197,377,213,197,571,9843,9842,9844,5650,1892,9750,420,9818,9796,356,9821,9773,6463,1662,222,9779,257,9829,2373,9810,1148,104,98,74,114,109,82,2093,9813,9793,1249,253,253,204,9837,9008,8099,233,498,1889,963,9707,755,257,9819,8792,9855,9823,2352,1446,9859,9828,4570,9830,9811,1038,9527,6092,200,9478,9874,9905,9873,327,9882,1501,9885,440,2793,9913,2795,2794,9916,2820,9852,5494,1701,9821,9385,6421,226,2654,226,208,40,9927,40,223,9618,224,9827,202,5837,257,3445,74,3860,76,9941,9943,4570,495,9899,1389,97,88,69,107,101,76,9838,9833,9907,9434,9909,1889,3732,2820,1361,9223,390,9666,723,9888,9853,78,9821,672,217,9663,4000,9906,9956,9977,9484,9959,7129,9961,3124,9963,9316,338,9966,9794,9889,9920,9797,9799,672,211,6937,9975,9044,62,53,40,189,1675,6489,7866,112,8974,9976,10007,9957,468,233,2773,1368,1445,10014,267,234,10006,351,9984,5667,337,9987,8401,9795,9990,363,9821,9815,7467,1940,229,56,114,10032,10034,10033,10035,10038,10037,10040,10036,10042,202,54,98,1038,65,9581,9091,4302,9482,10009,10053,9978,9262,8769,10057,1484,10058,396,10020,9964,9916,8707,1576,10066,2340,10067,45,10069,10066,42,284,526,82,46,64,1564,1643,10080,578,212,55,103,8740,10049,6457,5653,10052,10055,10091,10008,718,10062,9985,10023,9823,481,10076,10078,1642,10079,1495,10083,10085,1389,8805,5654,1665,9615,1152,10054,10093,10114,1280,10095,5667,10097,7682,10099,10077,10103,10102,1642,10105,10092,10113,10128,8324,10117,5520,10119,9479,10121,10101,10081,10124,10137,121,10126,10115,10127,10143,1389,483,785,72,93,90,72,6626,10131,5610,3528,1483,1486,9415,10135,10123,10139,10082,10084,10144,10129,10142,1389,442,254,9878,2782,9496,8844,40,805,10174,5805,10176,10178,10175,2571,79,355,9808,4035,8082,366,9748,6421,10159,10138,10160,316,10141,10165,10195,10164,9479,201,198,104,200,196,103,9694,1389,4710,81,2838,1111,3523,8439,510,10100,10192,10191,314,10194,9407,570,98,48,66,10221,10223,10222,99,48,9600,10166,10196,9404,7188,2838,1131,10074,8480,10213,10122,10216,10161,463,10218,9620,570,1495,3222,123,10197,9906,337,9195,10252,334,10253,543,10254,334,216,2778,1406,9645,10262,9481,10264,383,10233,2373,282,7302,6483,68,9504,10272,40,5605,383,10214,10240,10160,10243,9378,60,44,45,108,49,73,109,49,74,10286,73,10246,3223,10249,9733,244,9985,337,210,1313,1038,51,2771,9026,9024,1064,1060,2212,2211,332,427,350,3772,10208,10268,43,10270,6421,520,206,5965,371,10278,10241,10326,10193,10163,9454,65,44,49,205,10045,10334,98,204,53,98,10294,122,10296,9708,10298,10021,334,10301,10261,2771,9133,1769,248,2212,350,1483,1924,1924,10156,9610,10237,520,208,4302,350,2118,44,8061,4907,1375,282,51,1288,51,64,44,10374,10376,10375,10377,10380,10379,62,44,10211,9405,10375,48,10336,10336,10338,98,228,56,112,192,52,88,193,10397,195,52,89,10343,9793,10345,10063,10348,10303,10350,9204,977,10353,2933,570,520,210,5656,351,1960,10111,10111,9872,9708,10383,46,10389,10335,10045,207,322,4212,10230,9816,10406,9985,10408,10167,10410,9228,882,10413,1671,10415,413,210,1760,350,3387,10050,5654,4302,9996,8914,331,5659,551,1313,51,387,10459,551,6579,902,10425,10334,99,10466,10466,801,100,10432,10231,9719,10435,5667,10437,1292,10439,10351,653,10442,9447,561,413,215,2163,2647,10450,5653,10453,8885,124,1675,1889,269,10172,10473,10404,782,10475,5520,10477,1017,10304,10411,2095,10482,9621,10484,272,10486,2821,8481,10450,10491,8364,123,10494,7129,10496,9886,10498,10433,371,10501,5610,10503,1270,10505,10440,10352,10354,10483,414,220,9805,983,266,71,382,69,2360,67,9533,68,9533,9850,1280,119,104,1501,10521,930,358,89,3391,3391,3393,8763,10499,9667,112,1309,114,10564,10566,40,10565,10568,10567,10569,99,9239,10504,10479,10506,550,10508,2534,10510,410,220,9537,929,70,1301,68,10587,10589,40,10588,10591,10590,10592,1145,1466,115,101,1501,956,9314,782,3629,876,533,10560,10524,10523,2216,10530,10480,10441,2212,9608,1787,266,9477,1302,1301,1182,254,2348,10063,215,10302,1465,114,1877,1889,10601,10522,3541,10605,531,10607,10609,10561,10438,10577,436,59,1874,121,253,6550,3306,314,10205,1182,10548,285,10622,10346,5654,10626,1406,1753,2376,2537,452,2536,10662,9880,542,3772,93,4407,100,9564,641,10472,10638,10637,420,103,3201,2563,76,10678,10680,4570,10681,10679,10682,47,4719,10306,10688,1056,6682,242,1794,10692,426,10080,1179,10649,9390,1465,10653,10624,10656,326,76,3294,103,69,6524,10608,10673,2039,75,46,55,111,10290,117,51,78,10718,10720,10719,10721,10724,10723,10726,10722,78,90,47,7466,510,104,3201,5436,205,41,77,1155,10112,10740,1151,72,6848,1870,10746,1793,10647,121,10698,6660,1148,10701,9985,10625,10419,8626,220,6497,244,70,62,10703,10710,10765,4785,1419,10293,10279,10240,10399,7829,842,10734,61,5436,10678,454,71,9789,10215,10750,10522,8337,10784,420,10754,5667,10756,8962,2493,8319,254,249,75,86,64,8612,873,257,1398,75,9939,10804,2567,7815,1924,10711,10766,259,10768,10782,10079,10772,589,10775,10777,4570,454,70,1239,10782,10751,6724,1406,10788,5520,10790,347,57,451,898,267,1055,100,10708,929,9919,2838,3075,10674,10609,10812,10770,10326,10815,10774,10735,9969,10778,468,10821,52,10823,10786,8944]}';
}
var defenderImg = {note: "See http://tinyurl.com/KAImage4U to do your own image.",
author: "Created by Bob Lyon for Khan Academy image users.",
inflate: function(a){if(defenderImg.img){return defenderImg.img;}var c=function(a){var b=0,c,d,e;c=0;for(e=a.length;c<e;c++){d=a.charCodeAt(c);b=29*b+d|0;}return b&2147483647;},b=function(a){var b,c,d,e,h=256,f=[];for(b=0;256>b;b+=1){f[b]=String.fromCharCode(b);}d=c=String.fromCharCode(a[0]);for(b=1;b<a.length;b+=1){e=a[b];if(f[e]){e=f[e];}else if(e===h){e=c+c.charAt(0);}else{return null;}d+=e;f[h++]=c+e.charAt(0);c=e;}return d;},d=function(a){return this[a];}("JSON").parse(a?a:defenderImg.csc);if(d){var e;a=(a=b(d.pix))?a:d.pix;b=255/d.digit.length;defenderImg.img=createGraphics(d.width,d.height,JAVA2D);if(defenderImg.img){defenderImg.img.background(0, 0, 0,0);var f=defenderImg.img.get(),k=f.sourceImg.getContext("2d"),g=k.getImageData(0,0,defenderImg.img.width,defenderImg.img.height),b=c(defenderImg.note+defenderImg.author)===d.h?b:b/4;for(e=c=0;c<a.length;){g.data[e++]=round(b*d.digit.indexOf(a[c++]));g.data[e++]=round(b*d.digit.indexOf(a[c++]));g.data[e++]=round(b*d.digit.indexOf(a[c++]));g.data[e++]=255;}k.putImageData(g,0,0);defenderImg.img.image(f,0,0);}}return defenderImg.img;}, 
};
{
var deflatedDefender = '{"width":60,"height":60,"digit":"()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^abcdefghijklmnopqrstuvwxyz{|}~¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþ","h":1689796942,"pix":"((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((MUXMXb())((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((BFHÄÓÜ{Ðá?HP(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((JPT×åéâõüÃâúwÒëIVb())((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((SX^ÕæïèøþÝïùÂßõ¼ÞøxÔëO]h)))((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((JQUÛèîåöþâòúÝïùÃßõ¼Ûó¾ßø}ØïNYe(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((6:;ÑáçèùþàðùãóûÝïúÃßõ¼Ûô¾ÜóÂãûwÔé:AG((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()))q|¾áòúáóüàñúãóûÝïúÃßõ¼Üõ¿Ýõ¿Þõ¾Þöi~Ë)*+((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((:=@ØçðäõýàðúáòúãóûÝïúÃßõ¼Ûõ¿Þõ¿ÝõÀàø}×î>FL((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()))clrßðùâôüàñúáòúãóûÝïúÃßõ¼Ûõ¿Þõ¿Þõ¿Þö½Üõcu¾*+,((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((,..{ÆÌáñúáòûàñúáòúãóûÝïúÃßõ¼Ûõ¿Þõ¿Þõ¾Ýõ¾ÞöqÆ×,/1((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((.01ÃÑ×âóüáòúàñúáòúãóûÝïúÃßõ¼Ûõ¿Þõ¿Þõ¾ÝôÀàøwÏâ.26((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((.01ÄÑØâóüáòúáñúáòúãóûÝïúÃßõ¼Ûõ¿Þõ¿Þõ¾ÜôÁàøyÑä/37((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((.00ÂÐÖâóüáòúáñúáòúãóûÝïúÃßõ¼Ûõ¿Þõ¿Þõ¾ÝõÀàøwÏã.36((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((.00ÃÐÖâóüáòúáñúáòúãóûÝïúÃßõ¼Ûõ¿Þõ¿Þõ¾ÝõÁàøwÐâ.36((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((3;A3<C3<B3=D3;B)*,((((((((((((((((((((((((((((((((((((((((((((((((.01ÃÐÖâóüáòúáñúáòúãóûÝïúÃßõ¼Ûõ¿Þõ¿Þõ¾ÝõÁàøwÐâ.36(((((((((((((((((((((((((((((((((((((((((((((((((()*.2,/3+.3+.3(((H]nH^nH]mJbpGZk.4:((((((((((((((((((((((((((((((((((((((((((((((((.01ÃÐÖâóüáòúáñúáòúãóûÝïúÃßõ¼Ûõ¿Þõ¿Þõ¾ÝõÁàøwÐâ.36(((((((((((((((((((((((((((((((((((((((((((((((()**4>F6AI6?G6@H(((HaoJbrJbrLeuH^o-48((((((((((((((((((((((((((((((((((((((((((((((((.01ÃÐÖâóüáòúáñúáòúãóûÝïúÃßõ¼Ûõ¿Þõ¿Þõ¾ÝõÁàøwÐâ.36(((((((((((((((((((((((((((((((((((((((((((((((())*6@G7BK6AI6AJ(((H[mIapIapKcsH[m-37((((((((((((((((((((((((((((((((((((((((((((((((.01ÃÐÖâóüáòúáñúáòúãóûÝïúÃßõ¼Ûõ¿Þõ¿Þõ¾ÝõÁàøwÐâ.36(((((((((((((((((((((((((((((((((((((((((((((((())*4?G7BJ6@H6AH(((H]nJapIapKcsH]m-38((((((((((((((((((((((((((((((((((((((((((((((((.01ÃÐÖâóüáòúáñúáòúãóûÝïúÃßõ¼Ûõ¿Þõ¿Þõ¾ÝõÁàøwÐâ.36(((((((((((((((((((((((((((((((((((((((((((((((())*4?G7BJ6@H6AI(((H[nJapIapKcsH]m-37((((((((((((*,.,27,16,16,26)*,((((((((((((((((((.01ÃÐÖâóüáòúáñúáòúãóûÝïúÃßõ¼Ûõ¿Þõ¿Þõ¾ÝõÁàøwÐâ.36(((((((((((((((((((())*,)*,)*,)+,))*(((((((((((())*4?G7BJ6@H6AI(((H[nJapIapKcsH]m-37(((((((((());ISHaoH[nH^oG[l6@G(()(((((((((((((((.01ÃÐÖâóüáòúáñúáòúãóûÝïúÃßõ¼Ûõ¿Þõ¿Þõ¾ÝõÁàøwÐâ.36((((((((((((((((((*-04>G6@H4?G6AH08@(()((((((((())*4?G7BJ6@H6AI(((H[nJapIapKcsH]m-37(((((((((())=JUKcsJcrKcsJbq6@H(()(((((((((((((((.01ÃÐÖâóüáòúáñúáòúãóûÝïúÃßõ¼Ûõ¿Þõ¿Þõ¾ÝõÁàøwÐâ.36((((((((((((((((((*.16@I7BK6AJ7BK1:@(()((((((((())*4?G7BJ6@H6AI(((H[nJapIapKcsH]m-37(((((((((());HRJbqIapJbqH^o4?G((((((((((((((((((.01ÃÐÖâóüáòúáñúáòúãóûÝïúÃßõ¼Ûõ¿Þõ¿Þõ¾ÝõÁàøwÐâ.36((((((((((((((((((*-06@G7AI6@H6AJ08?(((((((((((())*4?G7BJ6@H6AI(((H[nJapIapKcsH]m-37(((((((((());IRJbrJbqJbrHao6?G(()(((((((((((((((.01ÃÐÖâóüáòúáñúáòúãóûÝïúÃßõ¼Ûõ¿Þõ¿Þõ¾ÝõÁàøwÐâ.36((((((((((((((((((*-06@G7AJ6AI6AJ08?(((((((((((())*4?G7BJ6@H6AI(((H[nJapIapKcsH]m-37(((((((((());IRJbrJbqJbrH^o6?G(()(((((((((((((((.01ÃÐÖâóüáòúáñúáòúãóûÝïúÃßõ¼Ûõ¿Þõ¿Þõ¾ÝõÁàøwÐâ.36((((((((((((((((((*-06@G7AJ6AI6AJ08?(((((((((((())*4?G7BJ6@H6AI(((H[nJapIapKcsH]m-37(((((((((());IRJbrJbqJbrH^o6?G(()(((((((((((((((.01ÃÐÖâóüáòúáñúáòúãóûÝïúÃßõ¼Ûõ¿Þõ¿Þõ¾ÝõÁàøwÐâ.36((((((((((((((((((*-06@G7AJ6AI6AJ08?(((((((((((())*4?G7BJ6@H6AI(((H[nJapIapKcsH]m-37(((((((((());IRJbrJbqJbrH^o6?G(()(((((((((((((((.01ÃÐÖâóüáòúáñúáòúãóûÝïúÃßõ¼Ûõ¿Þõ¿Þõ¾ÝõÁàøwÐâ.36((((((((((((((((((*-06@G7AJ6AI6AJ08?(((((((((((())*4?G7BJ6@H6AI(((H[nJapIapKcsH]m-37(((((((((());IRJbrJbqJbrH^o6?G(()(((((((((((((((.01ÃÐÖâóüáòúáñúáòúãóûÝïúÃàõ¼Üõ¿Þõ¿Þõ¾ÝõÁàøwÐâ.36((((((((((((((((((*-06@G7AJ6AI6AJ08?(((((((((((())*4?G7BJ6@H6AI(((H[nJapIapKcsH]m-37(((((((((());IRJbrJbqJbrH^o6?G(()(((((((((((((((.01ÃÐÖâóüáòúáñúàñúâóúÜïùÃßõ¼Ûó¾Ýõ¿Þõ¾ÝõÀàøwÐâ.36((((((((((((((((((*-06@G7AJ6AI6AJ08?(((((((((((())*4?G7BJ6@H6AI(((H[nJapIapKcsH]m-37(((((((((());IRJbrJbqJbrH^o6?G(()(((((((((((((((.01ÃÐÖâóüáòúàñúâòúåõûßòúÄâö½ÞõÀÞõ¿Þõ¾ÜõÁàøwÐâ.36((((((((((((((((((*-06@G7AJ6AI6AJ08?(((((((((((())*4?G7BJ6@H6AI(((H[nJapIapKcsH]m-37(((((((((());IRJbrJbqJbrH^o6?G(()(((((((((((((((.01ÃÐÖâóüàñúÞðúèøýñüýéúýÌëüÅçüÄäü¾Üõ¾ÜôÁàøwÐâ.36((((((((((((((((((*-06@G7AJ6AI6AJ08?(((((((((((())*4?G7BJ6@H6AI(((H[nJapIapKcsH]m-37(((((((((());IRJbrJbqJbrH^o6?G(()(((((((((((((((.00ÂÐÖâóüáòûåôúÕåíÉÖÜÆÖÞvËÜmÄØyÑæÁàö¿ÞõÀßøwÏã.36((((((((((((((((((*-06@G7AJ6AI6AJ08?(((((((((((())*4?G7BJ6@H6AI(((H[nJapIapKcsH]m-37(((((((((());HRJbqJbqJbrH^o6@G(()(((((((((((((((.02ÃÐÖàòüäõüðùúw¿Æ(6E<BL7AJ((4Xp|ÇçùÁáø¿ßøwÏâ.37((((((((((((((((((*-06@G7AJ6AH6AJ08?(((((((((((())*4?G7BJ6@H6AI(((H[nJapIapKcsH]m-38(((((((((())<ISJbrJbrJcrIao4?G(()(((((((((((((((,--ÄÐÕàòüäõüïúúw¿Å(((/6;0:@(((Yp|ÇèúÁàøÀßøyÑä,01((((((((((((((((((*-06@H7BJ6AI7BJ08?(((((((((((())*4?G7BJ6@H6AI(((H[nJbqIapKdsH]n.48(((((((((());HQJapHapJbqH[l0:@(((((((((()))*,(()347ÉÔÚäõýäõüïùúyÂÈ(-:7AH7BJ((*[r½ÆçùÁàøÂâú}Ôè27:((())*(()((((((((())*4=E6@H4@G6AI08>(()((((((((())*6@H7BK6AI6AI(((H]mJbpIapJcsG[l+/3((((((((((((7BJGZkG[mH]nG[k8FN,161;A8FO?O[G[kE^rOk¼Ðâîè÷ýåõýîùúyÂÈ()66>E6@H(((Zr¼ÆçùÂáùÃâú}×íHYi4BM<IS6@H08?-38*,/,374=F4>F3=D3<B,16((((((((((((())4>E6AJ6@H6AI(((FYiGZlGYjG[lBTd,04))*),.,163<CGYjRo¾UrÁVtÄWuÇXwÈXyÊYxËZzÌ[{Îa}ÐVyÎ^~ÑÒåñç÷ýåõýîùúyÂÈ((66>E6@H(((Zr¼ÆçùÂâùÃâú}×îQizAVhKbrJapH^nH]nH[mGZkEWhCUeASb@P]:FO-38*,/))*()))*+/6<3;B2;A3;B(((JbpMfwPk|Rn½So½MfvOizTpÀXxÈ[{Îa½Ób¾Ôb¾Õb¾Õb¾Ôb½Ób¼Ób¼Òa¼Òa¼Ñb¼ÒVyÎ[|ÐÒåðèøýåõýîùúyÂÈ((66>E6@H(((Zr¼ÆçùÂâùÃâú}×îPhxAUhKcsJbrKcrKcsKcsKdtLeuLevLevLevLeuJapG[lEVfAQ^?MX@P]?NZ=LV;HQ(((XwÈ^}Ðb½Ób¾Õc¿Õb½Óa¼Òb½Ôb¾Ôb½Ôa¼Òa¼Ña~Ña~Ña~Ñ^}Ñ^}Ð]}Ð^}Ð]}Ða~ÑUyÎ]}ÐÓæòçöýåõýîùúyÁÈ((66>E6@H(((Zr¼ÆçùÂáùÃâù¼ØïQiy@TfJbrJbqJapJapJapJbqJbrJbrJbrKbrKcsLdtKdtKcsJcrKdtMfvLevLduJbq((([|Îa¼Òa¼Òa¼Ña~Ñ^}Ñ]}Ð]}Ð]|Ð]|Ð]}Ð^}Ð^}Ð^}Ð^}Ð^}Ñ^}Ñ^}Ñ^}Ñ^}Ña}ÑNuËoÆØàñùäõýäõüïùûyÁÈ((66>E6@H(((Zr¼ÆçùÁáøÁàøÃâø[uÃ<OaJbqJbrJbqJbqJbqJbqJbqJapJapJapIapIapIapIapJapJbqJcrJcrJcsJcs(((ZzÌ]}Ð^}Ñ^}Ð^}Ð^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ña~Ñ]|ÐLrÈÁ×åìúýáòúãóüïúûyÁÈ()76?F6AH((([r¼ÇçúÁàøÀÞõÈèülÃÕ=QbIapJbrJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbpJapJbqIap(((ZyË]}Ð^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ña~ÑY{ÏVxÍÏâïìúþáòúäóüïúûyÁÇ)4=:BH8BK((/[r¼ÇçúÁáø¿ÝõÆæýzÔéJbpEYkJbrJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJap(((ZyË]}Ð^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ña}Ña}ÐRvËjÁÕÞïøæöþßðùåõüñúúr}À((((((((((((UjvÈèúÂáù½ÜóÂâúÃáøZtÁ>QcIapJbrJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJap(((ZyË]}Ð^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ña~Ñ[|ÐNsÉ¾ÔãêùüãôüÞðúãóüë÷ûÂÐ×blpdpuUivLami½ÎÄäøÁá÷¾ÜôÀßöÇèüoÅØAUfG]oJcrJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJap(((ZyË]}Ð^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ña~ÑXzÎ[|ÏÒåðëùþâóûàñúáòúßñúäõúìøøäöøÈæøÁâøÂáø¾Ýõ¾Þõ¾ÞõÀÞõÄäü}×îOhwCWiJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJap(((ZyË]}Ð^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ñ^}Ña}Ñ^}ÐPuÊoÆØáòúåõýáòúáñúáñúßñúãóüè÷þâôýÆäù¿àøÁß÷¿Ýõ¿ÝõÀÞõ¿ÜôÁàøÃâù]vÄ=QbIapJbrJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqJbqIap(((ZzÌ^}Ð^~Ñ^~Ñ^}Ñ]}Ð]}Ð]}Ð]}Ð]}Ð]}Ð]}Ð]}Ð]}Ð]}Ð]}Ð]}Ða}ÑZ{ÏMsÈ¾ÔäëùýãôüßñúáòúáòúáòúàñúâóúÜïùÃßõ¼Ûô¿ÝõÀÞöÀÞöÀÞö¾ÜõÁß÷ÈèünÄ×@SeG[mJbrIapJapJapJapJapJapJapJapJapJapIapJapJbrJbqJbrJbq((([|Ïa¼Ób½Ôa½Ób½Ôb½Ôa½Óa½Óa½Óa½Óa½Óa½Óa½Óa½Óa½Óa½Óa¼Òb½ÔX{Ð^~Ò×êõòýþå÷þÜõþÞõþÝõþÝõþÞõþàõþÚðþ¼ßýwÚü{áý{äýzãýzãýzâþÀäýËìþ¾ÜóQizBWhLdtJcrJcsKcsJcrJcsKcsJcrJcsJcsKcrKcrKcsLdtKdtKeuKds(((XvÇ[zÌ[zÍ[zÍZzÌXwÈVsÄTrÀUrÁUrÁUrÁUrÁUrÁUrÁUrÁUrÁUrÁUrÁMm¿g¼ÎÕæñÜíöàëïåíìåììåììåëìåïïçóñâîïÌáìÆáìÉÝìÉÖêÈ×ëÉ×ëÉ×ëÁ×ê}Øï¼ØïWp¼;NZDVfEVfDVfEVfDVfEVfEVfDVfEVfDVfDVfEXhGZkG[lG[mH[mH[m(((IapKcsKcsLeuH]m2:A),.*,/*,/*,/*,/*,/*,/*,/*,/*,/*,/*,0)+-4<BViwNg¿ÈzføËVüÇZúÆZûÂYûÍ]ûéeûëcùìbøícøy[øSYøbYùcYõeYÁXZ;QbGTb28=))*)*+)*,)*+)*+)*+)*+)*+)*+)*+)*+)*,)***.26@H8DN8CL7BL(((FYjG[mG[mIapFXi*,.(((((((((((((((((((((((((((((((((((((((),,:Oe(IrvePùÁ(þ¾(þ½(þ~(þ}(þÜ(þñAþø@þÝ-þL(þ@(þL(þL(úO(y;(((1.()(((((((((((((((((((((((((((((((((((((((((((((2:A4?G3=D4=E(((H[nJbpIapKcsH]m.48(((((((((((((((((((((((((((((((((((((((-48Nao.axeepóÀ>þÇ(ýÃ7þÃ6þ¼0þÈ=þòUýõWýuDý=:ýY=ýX>þY<õY=hHJ(@N=BL+.2((((((((((((((((((((((((((((((((((((((())*6@G7BK6AI6AI(((JcsKcsJcsLevIap.4:(((((((((((((((((((((((((((((((((((((((-4:LbpHdw;Z|ËvYüÈ(ýÃ,ýÂ/þÀ,þÀ)þÒ:þ¼BþJ8þS8þX:ýV:ýZ7ÕPBB@L-AL:AI*.2((((((((((((((((((((((((((((((((((((((()**6@H7BL7AJ7BJ(((EXiGZkGYkH]nEXh,27(((((((((((((((((((((((((((((((((((((((,27FYiJ]m,VpNZmâ|AýÇ(ýÂ-þÃ.þÆ,þ{)þL4þN:þX:ýV8ýW8éR<RAF(;H7?G4>E*,/((((((((((((((((((((((((((((((((((((((())*3=D6@H4>F4?G((()+-),.),.*,.),.(()((((((((((((((((((((((((((((((((((((((((()),-*,.*,.(*/UE0ñÃ(þÇ-ýÁ.þÆ-þ½/þ]8þR:ýV:þX:õX7e;/()*)))))))))((((((((((((((((((((((((((((((((((((((((((((())))))())())((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((qQ(öÁ.þÅ.üÅ,þ¾/þ^8ýQ:þU:úT;½G,*)((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((*)(sS)ö½-þÈ-ý¾.ý]8þP;ùS:¼B/-)(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())(hJ)ðÀ,þÁ/þZ:ôN:uA,*)(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((TB(ér.ïX6b7*)((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()((hG)pA+*((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("}';
}
var greenMonster = {note: "See http://tinyurl.com/KAImage4U to do your own image.",
author: "Created by Bob Lyon for Khan Academy image users.",
inflate: function(a){if(greenMonster.img){return greenMonster.img;}var c=function(a){var b=0,c,d,e;c=0;for(e=a.length;c<e;c++){d=a.charCodeAt(c);b=29*b+d|0;}return b&2147483647;},b=function(a){var b,c,d,e,h=256,f=[];for(b=0;256>b;b+=1){f[b]=String.fromCharCode(b);}d=c=String.fromCharCode(a[0]);for(b=1;b<a.length;b+=1){e=a[b];if(f[e]){e=f[e];}else if(e===h){e=c+c.charAt(0);}else{return null;}d+=e;f[h++]=c+e.charAt(0);c=e;}return d;},d=function(a){return this[a];}("JSON").parse(a?a:greenMonster.csc);if(d){var e;a=(a=b(d.pix))?a:d.pix;b=255/d.digit.length;greenMonster.img=createGraphics(d.width,d.height,JAVA2D);if(greenMonster.img){greenMonster.img.background(0,0,0,0);var f=greenMonster.img.get(),k=f.sourceImg.getContext("2d"),g=k.getImageData(0,0,greenMonster.img.width,greenMonster.img.height),b=c(greenMonster.note+greenMonster.author)===d.h?b:b/4;for(e=c=0;c<a.length;){g.data[e++]=round(b*d.digit.indexOf(a[c++]));g.data[e++]=round(b*d.digit.indexOf(a[c++]));g.data[e++]=round(b*d.digit.indexOf(a[c++]));g.data[e++]=255;}k.putImageData(g,0,0);greenMonster.img.image(f,0,0);}}return greenMonster.img;}, 
};
{
var deflatedGreenMonster = '{"width":40,"height":29,"digit":"()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^abcdefghijklmnopqrstuvwxyz{|}~¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþ","h":1689796942,"pix":[40,256,257,258,259,260,258,223,72,40,254,81,40,247,79,265,267,98,52,261,275,276,277,278,258,88,49,271,40,248,270,266,40,263,279,290,291,258,230,74,283,287,287,105,54,292,301,302,40,273,296,267,287,294,303,310,260,309,297,307,267,101,53,311,319,275,91,51,306,283,309,320,311,313,315,283,203,65,40,101,274,115,56,40,104,300,41,327,257,342,339,300,337,334,274,332,324,308,295,343,303,66,44,40,78,46,40,58,42,40,108,55,352,267,246,270,358,355,372,370,368,40,107,367,55,342,75,361,63,364,355,386,82,48,376,375,372,343,374,286,330,287,388,386,399,275,83,389,314,283,391,386,372,245,78,376,402,400,343,216,69,40,249,80,40,237,76,40,243,410,404,287,253,267,239,77,40,238,422,239,434,436,40,435,438,437,433,438,431,428,376,424,420,422,418,40,415,413,291,329,376,426,396,458,456,459,457,460,40,326,453,278,455,462,469,461,471,463,470,324,465,400,61,364,109,367,99,274,97,323,430,376,445,474,489,472,474,488,459,486,484,40,482,334,318,305,385,292,106,300,490,324,122,59,40,64,364,65,43,288,264,506,506,289,513,510,514,120,509,517,459,62,502,290,504,473,459,98,323,260,212,68,531,538,536,261,322,538,462,527,301,530,525,283,496,535,537,548,474,540,260,542,553,267,351,276,289,235,422,226,264,240,431,558,440,40,227,73,571,573,269,543,491,267,576,572,574,432,422,569,228,573,220,71,448,258,375,569,593,578,577,596,569,257,592,595,594,597,601,604,603,283,599,395,606,602,611,605,602,608,376,124,60,40,85,389,496,486,612,610,613,330,495,323,620,40,617,376,615,462,76,361,312,295,624,640,605,476,257,636,633,256,600,324,360,261,468,626,625,654,643,256,77,361,462,634,459,650,638,376,244,410,421,570,439,670,437,671,669,672,675,570,668,666,376,656,40,658,646,40,648,404,663,259,652,283,533,466,303,557,459,681,683,660,647,609,687,637,689,639,532,534,693,292,695,475,354,259,650,699,685,701,330,398,664,462,118,58,362,364,74,45,40,726,728,727,729,650,54,345,259,51,342,645,729,740,731,727,59,364,117,723,462,681,398,715,366,40,348,114,338,111,367,48,735,258,498,722,40,102,318,195,63,606,192,62,261,770,606,767,499,40,763,100,274,260,759,40,757,40,755,753,338,708,750,653,773,260,773,569,719,708,387,403,791,771,793,771,795,389,797,386,714,369,270,375,811,810,609,125,618,260,126,61,405,813,716,822,648,79,703,343]}';
}
var redMonster = {note: "See http://tinyurl.com/KAImage4U to do your own image.",
author: "Created by Bob Lyon for Khan Academy image users.",
inflate: function(a){if(redMonster.img){return redMonster.img;}var c=function(a){var b=0,c,d,e;c=0;for(e=a.length;c<e;c++){d=a.charCodeAt(c);b=29*b+d|0;}return b&2147483647;},b=function(a){var b,c,d,e,h=256,f=[];for(b=0;256>b;b+=1){f[b]=String.fromCharCode(b);}d=c=String.fromCharCode(a[0]);for(b=1;b<a.length;b+=1){e=a[b];if(f[e]){e=f[e];}else if(e===h){e=c+c.charAt(0);}else{return null;}d+=e;f[h++]=c+e.charAt(0);c=e;}return d;},d=function(a){return this[a];}("JSON").parse(a?a:redMonster.csc);if(d){var e;a=(a=b(d.pix))?a:d.pix;b=255/d.digit.length;redMonster.img=createGraphics(d.width,d.height,JAVA2D);if(redMonster.img){redMonster.img.background(0,0,0,0);var f=redMonster.img.get(),k=f.sourceImg.getContext("2d"),g=k.getImageData(0,0,redMonster.img.width,redMonster.img.height),b=c(redMonster.note+redMonster.author)===d.h?b:b/4;for(e=c=0;c<a.length;){g.data[e++]=round(b*d.digit.indexOf(a[c++]));g.data[e++]=round(b*d.digit.indexOf(a[c++]));g.data[e++]=round(b*d.digit.indexOf(a[c++]));g.data[e++]=255;}k.putImageData(g,0,0);redMonster.img.image(f,0,0);}}return redMonster.img;}, 
};
{
var deflatedRedMonster = '{"width":40,"height":29,"digit":"()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^abcdefghijklmnopqrstuvwxyz{|}~¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþ","h":1689796942,"pix":[40,256,257,258,259,260,257,223,256,254,256,247,264,256,98,261,271,272,273,274,259,88,268,40,248,278,263,275,283,284,258,230,278,265,40,289,105,285,293,294,269,288,278,287,295,300,260,299,289,304,256,101,301,308,272,91,297,290,256,299,309,301,303,312,203,306,256,115,256,104,256,41,316,257,327,40,325,40,323,40,307,40,320,313,339,289,315,328,294,66,256,78,256,58,256,108,312,289,246,256,44,343,40,356,40,354,340,278,107,256,55,256,75,256,63,357,371,82,352,256,361,359,328,359,361,305,339,373,371,384,260,83,374,360,355,357,359,245,388,387,385,316,216,256,249,256,237,256,243,388,253,256,239,256,238,407,411,40,408,413,412,414,410,415,40,406,362,339,404,40,402,40,400,40,398,396,283,318,422,381,435,388,436,434,437,388,342,431,272,433,438,446,440,439,449,447,422,442,371,61,350,256,99,256,97,412,438,421,451,464,448,462,388,414,460,40,458,335,296,40,42,294,106,466,312,122,256,64,256,65,256,282,465,450,281,484,482,256,120,479,449,62,477,495,381,270,261,212,499,448,503,261,311,489,509,497,293,478,509,438,470,260,506,488,488,506,260,508,519,278,202,274,282,235,256,226,256,240,504,339,414,227,256,537,40,267,514,495,541,539,539,418,524,339,228,256,220,401,259,380,534,548,557,556,559,509,257,555,542,564,558,565,560,566,562,568,571,567,573,566,438,570,449,124,256,85,459,461,572,575,560,469,580,256,579,449,577,438,76,271,445,584,597,509,453,256,594,591,375,388,347,261,596,574,598,548,600,40,77,388,592,312,606,302,388,244,553,419,414,624,416,626,623,627,625,425,256,621,449,612,614,603,389,449,618,259,608,289,501,443,293,523,312,635,615,604,639,595,388,644,645,284,647,452,271,606,576,651,438,383,619,449,118,348,256,74,670,672,40,671,40,606,54,271,51,601,673,675,683,256,59,256,117,441,271,383,662,40,351,333,256,114,256,111,256,48,271,472,668,40,102,256,195,560,192,271,710,609,40,708,473,40,704,100,271,701,40,699,40,697,695,656,691,534,712,260,712,566,665,656,343,728,573,730,259,732,534,734,735,316,661,651,361,748,663,256,125,271,126,278,749,638,756,289,79,385]}';
}
var purpleMonster = {note: "See http://tinyurl.com/KAImage4U to do your own image.",
author: "Created by Bob Lyon for Khan Academy image users.",
inflate: function(a){if(purpleMonster.img){return purpleMonster.img;}var c=function(a){var b=0,c,d,e;c=0;for(e=a.length;c<e;c++){d=a.charCodeAt(c);b=29*b+d|0;}return b&2147483647;},b=function(a){var b,c,d,e,h=256,f=[];for(b=0;256>b;b+=1){f[b]=String.fromCharCode(b);}d=c=String.fromCharCode(a[0]);for(b=1;b<a.length;b+=1){e=a[b];if(f[e]){e=f[e];}else if(e===h){e=c+c.charAt(0);}else{return null;}d+=e;f[h++]=c+e.charAt(0);c=e;}return d;},d=function(a){return this[a];}("JSON").parse(a?a:purpleMonster.csc);if(d){var e;a=(a=b(d.pix))?a:d.pix;b=255/d.digit.length;purpleMonster.img=createGraphics(d.width,d.height,JAVA2D);if(purpleMonster.img){purpleMonster.img.background(0,0,0,0);var f=purpleMonster.img.get(),k=f.sourceImg.getContext("2d"),g=k.getImageData(0,0,purpleMonster.img.width,purpleMonster.img.height),b=c(purpleMonster.note+purpleMonster.author)===d.h?b:b/4;for(e=c=0;c<a.length;){g.data[e++]=round(b*d.digit.indexOf(a[c++]));g.data[e++]=round(b*d.digit.indexOf(a[c++]));g.data[e++]=round(b*d.digit.indexOf(a[c++]));g.data[e++]=255;}k.putImageData(g,0,0);purpleMonster.img.image(f,0,0);}}return purpleMonster.img;}, 
};
{
var deflatedPurpleMonster = '{"width":40,"height":29,"digit":"()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^abcdefghijklmnopqrstuvwxyz{|}~¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþ","h":1689796942,"pix":[40,256,257,258,259,260,257,213,40,223,242,40,254,236,40,247,266,254,90,40,98,261,277,278,279,280,257,84,40,88,272,237,40,248,272,263,223,281,293,294,257,219,40,230,272,300,267,100,40,105,295,306,307,274,98,301,254,272,297,230,307,316,261,314,311,272,97,40,101,317,325,278,86,40,91,320,267,314,326,326,319,267,311,195,40,203,94,323,108,40,115,99,40,104,41,40,350,334,351,351,347,104,344,115,342,101,339,203,331,254,333,353,316,64,40,66,74,40,78,55,40,58,102,40,108,364,235,40,246,43,40,44,367,385,44,382,246,364,378,107,54,40,55,72,40,75,60,40,63,367,405,256,78,40,82,381,383,389,388,386,391,364,408,82,406,420,261,79,40,83,411,246,387,387,353,389,233,40,245,364,423,83,421,353,206,40,216,238,40,249,226,40,237,232,40,243,364,266,253,228,40,239,227,40,238,455,239,461,463,456,464,457,459,461,241,40,253,364,449,243,446,237,443,249,440,216,438,293,336,312,337,486,485,488,452,487,490,489,491,494,493,488,366,482,279,484,492,502,495,503,496,505,498,420,59,40,61,103,40,109,91,40,99,89,40,97,461,490,472,504,525,506,526,523,364,461,519,97,516,99,322,101,309,42,40,539,294,324,106,505,311,116,40,122,61,40,64,404,65,291,545,528,267,291,62,40,65,550,64,114,40,120,556,496,402,560,542,40,544,557,496,519,276,259,203,40,212,568,492,580,212,260,328,330,575,364,570,295,543,583,267,532,260,585,595,527,254,585,260,87,329,600,194,340,278,291,225,40,235,481,226,229,40,240,600,461,217,40,227,622,227,269,271,590,575,627,625,625,458,238,600,218,40,228,210,40,220,476,257,416,629,601,600,648,646,649,488,644,383,651,655,650,657,647,646,653,392,658,656,659,665,664,505,661,364,118,40,124,81,40,85,532,522,663,679,666,575,531,520,674,85,671,124,364,669,495,73,40,76,260,501,680,667,646,508,256,692,76,689,256,645,496,372,408,259,696,681,712,698,496,700,40,372,77,704,613,654,495,708,695,298,473,40,244,476,466,731,465,733,462,734,732,735,738,476,449,244,364,716,718,720,706,311,724,710,726,495,577,499,307,605,589,715,298,260,745,495,690,707,373,725,299,752,275,754,306,756,743,759,259,708,746,722,496,418,766,364,112,40,118,56,376,71,717,788,74,790,790,708,52,40,396,259,50,40,51,702,792,789,804,74,786,59,111,40,117,773,315,259,418,720,378,108,358,344,114,305,111,47,40,48,260,534,783,118,322,102,126,40,195,600,124,40,192,260,837,192,600,188,834,536,829,93,40,303,259,46,825,822,820,358,770,815,658,841,840,838,600,780,770,406,858,713,267,860,259,841,863,409,865,406,776,267,391,879,383,880,662,254,119,40,125,260,885,126,272,882,892,778,75,40,423,406]}';
}
var backgroundRectX = [81, 18, 105, 36, 5, 283, 368, 482, 500, 400, 245];
var backgroundRectY = [60, 196, 240, 387, 555, 100, 80, 168, 500, 400, 450];

// Original class structure designed by Iowa State Computer Science Department. Rewritten in JavaScript by Evan Lewis.
// UTILS
{
/**
 * Checks to see if two bounding rings overlap
 */
var intersects = function(br1, br2) {
    if (br1.x2 < br2.x1 || br1.y2 < br2.y1 || br1.x1 > br2.x2 || br1.y1 > br2.y2) {
        return false;
    }
    return true;
};

/**
 * Creates a rectangle surrounding an object to check for 
 * collisions
 */
var BoundingRing = function(pos, size) {
    this.x1 = pos.x - (size/2);
    this.y1 = pos.y - (size/2);
    this.x2 = pos.x + (size/2);
    this.y2 = pos.y + (size/2);
};

/**
 * Holds the position of an object
 */
var Position = function(x, y) {
    this.x = x;
    this.y = y;
};
}

// PROJECTILES
{
/**
 * Generic projectile object
 */
var Projectile = function(pos, xSpeed, ySpeed, yAcceleration) {
    this.pos = pos;
    this.distancePerFrameX = xSpeed;
    this.distancePerFrameY = ySpeed;
    this.accelerationPerFrameY = yAcceleration;
    this.ring = new BoundingRing(pos, PROJECTILE_SIZE / 2);
};

/**
 * Moves the projectile to the next position
 */
Projectile.prototype.nextPosition = function() {
  this.pos.x += this.distancePerFrameX;  
  this.pos.y += this.distancePerFrameY;
  this.pos.y += this.accelerationPerFrameY;
  
  this.ring = new BoundingRing(this.pos, PROJECTILE_SIZE / 2);
};

/**
 * Checks if the projectile has hit a given BoundingRing
 */
Projectile.prototype.hit = function(r) {
    return intersects(this.ring, r);
};

/**
 * Returns true iff projectile is outside the canvas
 */
Projectile.prototype.isOutOfBounds = function() {
    return (this.pos.x <= 0 || this.pos.x >= CANVAS_WIDTH-24 || this.pos.y <= 0 || this.pos.y >= CANVAS_HEIGHT-24);
};

/**
 * Bomb object that explodes on impact. Inherits from Projectile.
 */
var Bomb = function(pos, xSpeed, ySpeed, yAcceleration, explosionRadius) {
  Projectile.call(this, pos, xSpeed, ySpeed, yAcceleration);
  this.explosion = new BoundingRing(pos, explosionRadius / 2);
  this.blowUp = false;
};

Bomb.prototype = Object.create(Projectile.prototype);

/**
 * Bomb blows up if it reaches the bottom of the canvas, or intersects BoundingRing r
 */
Bomb.prototype.blowUp = function(r) {
    this.blowUp = this.hit(r) || this.explosion.y >= CANVAS_HEIGHT - 50 || this.explosion.intersects(r);
    return this.blowUp;
};

/**
 * Projectile shot by the DefenderShip. Inherits from Projectile.
 */
var DefenderProjectile = function(pos, ySpeed) {
    Projectile.call(this, pos, 0, ySpeed, 0);
};

DefenderProjectile.prototype = Object.create(Projectile.prototype);

DefenderProjectile.prototype.paint = function() {
    fill(252, 189, 15);
    rect(this.pos.x, this.pos.y, 5, 12);
};

}

// SPACESHIPS
{
/**
 * Generic spaceship object.
 */
var SpaceShip = function(pos, armor) {
    this.pos = pos;
    this.armorLevel = armor;
    this.size = new BoundingRing(pos, HALO_SIZE);
    this.lastShotTime = 0;
    this.blink = false;
};

/**
 * Returns true iff the spaceship can shoot
 */
SpaceShip.prototype.canFire = function() {
    if ( Date.now() - this.lastShotTime > 400 ) {
        return true;
    }
    return false;
};

/**
 * Translates the spaceship a given x and y distance
 */
SpaceShip.prototype.translate = function(deltaX, deltaY) {
    this.pos.x += deltaX;
    this.pos.y += deltaY;
    this.size = new BoundingRing(this.pos, HALO_SIZE);
};

/**
 * Moves the spaceship to the given x and y position
 */
SpaceShip.prototype.setPosition = function(newX, newY) {
    this.pos = new Position(newX, newY);
    this.size = new BoundingRing(this.pos, HALO_SIZE);
};

/**
 * Returns true iff this spaceship collides with BoundingRing r
 * If there is a collision, this spaceship takes a hit
 */
SpaceShip.prototype.collide = function(r) {
    if (intersects(this.size, r)) {
        this.takeHit();
        return true;
    }
    return false;
};

/**
 * Reduces armor level by 1 and causes the ship to blink
 */
SpaceShip.prototype.takeHit = function() {
    this.armorLevel--;
    this.blink = true;
};

/**
 * Generic InvaderShip object. Inherits from SpaceShip
 */
var InvaderShip = function(pos, armor) {
    SpaceShip.call(this, pos, armor);
};

InvaderShip.prototype = Object.create(SpaceShip.prototype);

/**
 * Enemy shooter ship object. Inherits from InvaderShip
 */
var ShooterShip = function(pos, armor) {
    InvaderShip.call(this, pos, armor);
};

ShooterShip.prototype = Object.create(InvaderShip.prototype);

ShooterShip.prototype.paint = function() {
    if (this.blink) {
        this.blink = false;
    } else {
        var img = greenMonster.inflate(deflatedGreenMonster);
        if (! img) {
            return;
        }
        image(img, this.pos.x, this.pos.y);
    }
};

/**
 * Fires a single projectile if the ship can fire.
 * Returns an array with a single projectile or null;
 */
ShooterShip.prototype.fire = function() {
    if (this.canFire()) {
        var out = [];
        out.push(new Projectile(new Position(this.pos.x, this.pos.y), 0, -PROJECTILE_SPEED, -GRAVITY));
        this.lastShotTime = Date.now();
        return out;
    }
    return null;
};

/**
 * Returns the points earned for destroying a ShooterShip
 */
ShooterShip.prototype.getPoints = function() {
  return 50;  
};

/**
 * Invader ship that fires a spread of bullets. Inherits from 
 * ShooterShip.
 */
var MultiShooterShip = function(pos, armor) {
    ShooterShip.call(this, pos, armor);
};

MultiShooterShip.prototype = Object.create(ShooterShip.prototype);

/**
 * Fires a spread of bullets if the ship can fire.
 * Returns an array of projectiles or null.
 */
MultiShooterShip.prototype.fire = function() {
    if (this.canFire()) {
        var out = [];
    
        for (var i = 0; i < NUM_CANNONS; i++)
        {
            out.push(new Projectile(new Position(this.pos.x, this.pos.y), (i - (NUM_CANNONS / 2)) * SPREAD, -PROJECTILE_SPEED, -GRAVITY));
        }
        this.lastShotTime = Date.now();
        return out;
    }
    return null;
};


/**
 * Shoots bombs that explode on impact. Inherits from InvaderShip.
 */
var BomberShip = function(pos, armor) {
    InvaderShip.call(this, pos, armor);
    this.explosionRadius = 10;
};

BomberShip.prototype = Object.create(InvaderShip.prototype);

BomberShip.prototype.paint = function() {
    if (this.blink) {
        this.blink = false;
    } else {
        var img = redMonster.inflate(deflatedRedMonster);
        if (! img) {
            return;
        }
        image(img, this.pos.x, this.pos.y);
    }
};

/**
 * Fires a single bomb if the ship can fire. Returns an array 
 * containing a single bomb or null;
 */
BomberShip.prototype.fire = function() {
    if (this.canFire()) {
        var out = [];
        out.push(new Bomb(new Position(this.pos.x + 8, this.pos.y), 0, -PROJECTILE_SPEED, -GRAVITY, this.explosionRadius));
        this.lastShotTime = Date.now();
        return out;
    }
    return null;
};

/**
 * Returns the points earned from destroying a BomberShip.
 */
BomberShip.prototype.getPoints = function() {
    return 100;
};

/**
 * Bomber that drops large bombs. Inherits from BomberShip.
 */
var TsarBombaShip = function(pos, armor) {
    BomberShip.call(this, pos, armor);
    this.explosionRadius = 50;
};

TsarBombaShip.prototype = Object.create(BomberShip.prototype);

TsarBombaShip.prototype.paint = function() {
    if (this.blink) {
        this.blink = false;
    } else {
        var img = purpleMonster.inflate(deflatedPurpleMonster);
        if (! img) {
            return;
        }
        image(img, this.pos.x, this.pos.y);
    }
};

/**
 * Defender ship controlled by the player. Inherits from SpaceShip.
 */
var DefenderShip = function() {
    var p = new Position(CANVAS_WIDTH/2 - DEFENDER_SHIP_WIDTH/2, CANVAS_HEIGHT - DEFENDER_SHIP_HEIGHT);

    SpaceShip.call(this, p, MAX_ARMOR);
}; 

DefenderShip.prototype = Object.create(SpaceShip.prototype);

/**
 * Fires a single projectile if ship can fire.
 * Returns an array containing a single projectile or null.
 */
DefenderShip.prototype.fire = function() {
    if (this.canFire()) {
        var out = [];
        var p = new Position(this.pos.x + DEFENDER_SHIP_WIDTH/2, this.pos.y - DEFENDER_SHIP_HEIGHT/2);
        out.push(new DefenderProjectile(p, PROJECTILE_SPEED));
        this.lastShotTime = Date.now();
        return out;
    }
    return null;
};

/**
 * Draws the DefenderShip at its current position.
 */
DefenderShip.prototype.paint = function() {
    var img = defenderImg.inflate(deflatedDefender);
    if (! img) {
        return;
    }
    image(img, this.pos.x, this.pos.y);
};
}

// GAME METHODS
{
/**
 * Checks if the given DefenderProjectile has hit an enemy 
 * ship. If so, the enemy ship takes damage and is removed 
 * if destroyed.
 */
var checkForEnemyHit = function(d) {
    for (var row = enemyFleet.length - 1; row >= 0; row--) {
	    for (var col = 0; col < enemyFleet[row].length; col++) {
		    if (enemyFleet[row][col] !== null) {
		        // Check if projectile has hit enemy
		        if (d.hit(enemyFleet[row][col].size)) {
		            
			        // Enemy takes a hit
			        enemyFleet[row][col].takeHit();
		  
			        // Check if enemy was destroyed
			        if (enemyFleet[row][col].armorLevel <= 0) {
			            score += enemyFleet[row][col].getPoints();
			            enemyFleet[row][col] = null;
			            if (sound) {
			                playSound(getSound("retro/boom1"));
			            }
			        }
			        return true;
		        }
		    }
	    }
	}
	return false;
};

/**
 * Checks each projectile for collisions with enemy ships and 
 * the defender.
 */
var handleCollisions = function() {
	for (var i = projectiles.length - 1; i >= 0; i--) {
	    var p = projectiles[i];
	    
	    if (p.isOutOfBounds()) {
	        if (p instanceof Bomb) {
		        if (defender !== null && p.hit(defender.size) && p.blowUp(defender.size)) {
			        defender.takeHit();
			        if (defender.armorLevel <= 0) {
				        defender = null;
				        return;
			        }
		        }
		    }
		    projectiles.splice(i, 1);
		    i--;
	    } else if (p instanceof DefenderProjectile) {
		    if (checkForEnemyHit(p)) {
		        if (sound) {
		            playSound(getSound("retro/hit2"));
		        }
		        projectiles.splice(i, 1);
		        i--;
		    }
	    } else if (defender !== null && p.hit(defender.size)) {
		    defender.takeHit();
		    if (sound) {
		        playSound(getSound("retro/hit2"));
		    }
		    projectiles.splice(i, 1);
		    i--;
		    if (defender.armorLevel <= 0) {
		        if (sound) {
		            playSound(getSound("retro/rumble"));
		        }
		        defender = null;
		        return;
		    }
	    }
        p.nextPosition();
	}
};

/**
 * Returns a reference to the right-most enemy ship, or null if
 * there are no enemy ships.
 */
var getRightMostEnemy = function() {
    for (var col = enemyFleet[0].length - 1; col >= 0; col--) {
	  for (var row = enemyFleet.length - 1; row >= 0; row--) {
		if (enemyFleet[row][col] !== null) {
		  return enemyFleet[row][col];
		}
	  }
	}
	return null;
};

/**
 * Returns a reference to the left-most enemy ship, or null if 
 * there are no enemy ships.
 */
var getLeftMostEnemy = function() {
    for (var col = 0; col < enemyFleet[0].length; col++) {
	  for (var row = 0; row < enemyFleet.length; row++) {
		if (enemyFleet[row][col] !== null) {
		  return enemyFleet[row][col];
		}
	  }
	}
	return null;
};

/**
 * Returns a reference to the lowest enemy ship, or null if 
 * there are no enemy ships.
 */
var getLowestEnemy = function() {
    for (var row = enemyFleet.length - 1; row >= 0; row--) {
	  for (var col = enemyFleet[row].length - 1; col >= 0; col--) {
		if (enemyFleet[row][col] !== null) {
		  return enemyFleet[row][col];
		}
	  }
	}
	return null;
};

/**
 * Translates the entire enemy fleet by the given amount
 */
var translateEnemyFleet = function(deltaX, deltaY) {
    for (var row = 0; row < enemyFleet.length; row++) {
        for (var col = 0; col < enemyFleet[row].length; col++){
            if (enemyFleet[row][col] !== null) {
                enemyFleet[row][col].translate(deltaX, deltaY);
            
                // Check if enemy has collided with defender
                if (intersects(enemyFleet[row][col].size, defender.size)) {
                    defender = null;
                    return;
                }
            
                // Handle enemy firing
                if (random(1) < FIRING_PROBABILITY) {
                    var p = enemyFleet[row][col].fire();
                    if (p !== null) {
                        for (var i = 0; i < p.length; i++) {
                            projectiles.push(p[i]);
                        }
                    }
                }
            }
        }
    }
};

/**
 * Moves the defender ship by the given amount
 */
var translateDefender = function(xAmount, yAmount) {
    var newX = defender.pos.x + xAmount;
    var newY = defender.pos.y + yAmount;
    
    // Check for invalid positions
    if (newX < 0) {
        newX = 0;
    }
    if (newX > CANVAS_WIDTH - 35 - DEFENDER_SHIP_WIDTH / 2) {
        newX = CANVAS_WIDTH - 35 - DEFENDER_SHIP_WIDTH / 2;
    }
    if (newY < 0) {
        newY = 0;
    }
    if (newY > CANVAS_HEIGHT - 30 - DEFENDER_SHIP_HEIGHT / 2) {
        newY = CANVAS_HEIGHT - 30 - DEFENDER_SHIP_HEIGHT / 2;
    }
    
    defender.pos.x = newX;
    defender.pos.y = newY;
    defender.size = new BoundingRing(defender.pos, HALO_SIZE);
};

/**
 * Returns true iff the defender is destroyed.
 */
var defenderDestroyed = function() {
    return defender === null;
};

/**
 * Returns true iff entire enemy fleet is destroyed.
 */
var enemyFleetDestroyed = function() {
    return getLowestEnemy() === null;
};

/**
 * Returns true iff game is over
 */
var gameIsOver = function() {
    return defenderDestroyed() || enemyFleetDestroyed() || getLowestEnemy().y >= CANVAS_HEIGHT;
};

/**
 * Moves the Defender given a direction, or fires a DefenderPro
 * jectile, as long as the game is not over.
 */
var moveDefender = function(up, down, left, right, fire) {
    if (gameIsOver()) {
	    return;
    }

	if (fire) {
	    var p = defender.fire();
	    if (p !== null) {
		    projectiles.push(p[0]);
	    }
	}

	if (right) {
	  translateDefender(MOVE_DELTA, 0);
	}
	if (left) {
	  translateDefender(-1 * MOVE_DELTA, 0);
	}
	if (up) {
	  translateDefender(0, -1 * MOVE_DELTA);
	}
	if (down) {
	  translateDefender(0, MOVE_DELTA);
	}
};

/**
 * Handles moving the enemy fleet each frame, as long as the 
 * game is not over.
 */
var moveEnemyFleet = function() {
    if (!gameIsOver()) {
	    // Move in positive x direction
	    if (fleetMovePositiveX) {
		    // x position of right most enemy
		    var rightX = getRightMostEnemy().pos.x;
		
		    // Check if rightmost enemy will go out of bounds
		    if (rightX + FLEET_MOVE_X + 35 > CANVAS_WIDTH) {
		        // If so, change direction and move down
		        translateEnemyFleet(0, FLEET_MOVE_Y);
		        fleetMovePositiveX = false;
		    }
		    else {
		        // Otherwise, move in positive x direction
		        translateEnemyFleet(FLEET_MOVE_X, 0);
	        }
	    }
	    // Move in negative x position
	    else
	    {
		    // x position of left most enemy
		    var leftX = getLeftMostEnemy().pos.x;
				
		    // Check if leftmost enemy will go out of bounds
		    if (leftX - FLEET_MOVE_X < 0) {
		        // If so, change direction and move down
		        translateEnemyFleet(0, FLEET_MOVE_Y);
		        fleetMovePositiveX = true;
		    }
		    else {
		        // Otherwise, move in negative x direction
		        translateEnemyFleet(-1 * FLEET_MOVE_X, 0);
		    }
	    }
	}
};

var gameBackdrop = function() {
    background(0, 0, 0);
    fill(252, 244, 126);
    for (var i = 0; i < backgroundRectX.length; i++) {
        rect(backgroundRectX[i], backgroundRectY[i], 10, 10);
    }
};

var contestBackdrop = function() {
    background(0, 0, 0);
    var img = img180.inflate(deflatedImage);
    if (! img) {
        return;
    }
    image(img, 0, 0, 600, 600);
    
    var f = createFont("Impact");
    textAlign("CENTER");
    textFont(f);
    
    textSize(44);
    fill(255, 217, 0);
    text("CLICK TO PLAY", 179, 42);
    
    textSize(55);
    fill(51, 43, 0);
    text("Contest: Arcade Game", 53, 486);
    
    fill(128, 107, 0);
    text("Contest: Arcade Game", 53, 488);
    
    fill(255, 217, 0);
    text("Contest: Arcade Game", 53, 491);
    
    textSize(32);
    fill(51, 43, 0);
    text("Deadline: February 21, 2020", 117, 556);
    
    fill(128, 107, 0);
    text("Deadline: February 21, 2020", 117, 556);
    
    fill(255, 217, 0);
    text("Deadline: February 21, 2020", 117, 558);
};

var overBackdrop = function() {
    background(0, 0, 0);
    var img = img180.inflate(deflatedImage);
    if (! img) {
        return;
    }
    image(img, 0, 0, 600, 600);
    
    var f = createFont("Impact");
    textAlign("CENTER");
    textFont(f);
    
    textSize(83);
    fill(128, 107, 0);
    text("GAME OVER", 118, 505);
    fill(255, 217, 0);
    text("GAME OVER", 118, 510);
    
    textSize(49);
    var t = "Score: " + score;
    fill(128, 107, 0);
    text(t, (CANVAS_WIDTH - textWidth(t))/2, 569);
    fill(255, 217, 0);
    text(t, (CANVAS_WIDTH - textWidth(t))/2, 573);
};
}

var draw = function() {
    
    if (!init) {
        // Fill invader fleet
        for (var y = 0; y < SHIPS_Y; y++) {
	        for (var x = 0; x < SHIPS_X; x++) {
		        var pos = new Position(((CANVAS_WIDTH / 4.5) + (x * SHIP_SPACING)),10 + ((y * SHIP_SPACING)));
		        switch (floor(random(NUM_INVADER_SHIPS))) {
		        case 0:
			    enemyFleet[y].push(new ShooterShip(pos, floor(random(MAX_ARMOR)) + 1));
			    break;
		        case 1:
			    enemyFleet[y].push(new BomberShip(pos, floor(random(MAX_ARMOR)) + 1));
			    break;
		        case 2:
			    enemyFleet[y].push(new MultiShooterShip(pos, floor(random(MAX_ARMOR)) + 1));
			    break;
		        case 3:
			    enemyFleet[y].push(new TsarBombaShip(pos, floor(random(MAX_ARMOR)) + 1));
			    break;
		        }
	        }
	    }
	
	    fleetMovePositiveX = true;
	    defender = new DefenderShip();
	    score = 0;
        init = true;
    }
    
    if (launched) {
        if (gameIsOver()) {
            overBackdrop();
        } else {
            gameBackdrop();
            
            // Draw defender
            defender.paint();
            
            // Draw enemy fleet
            for (var row = 0; row < enemyFleet.length; row++) {
                for (var col = 0; col < enemyFleet[row].length; col++) {
                    if (enemyFleet[row][col] !== null) {
                        enemyFleet[row][col].paint();
                    }
                }
            }
            
            // Draw projectiles
            for (var i = 0; i < projectiles.length; i++) {
                if (projectiles[i] instanceof DefenderProjectile) {
                    fill(252, 189, 15);
                }
                else if (projectiles[i] instanceof Bomb) {
                    fill(191, 191, 191);
                }
                else {
                    fill(255, 0, 0);
                }
                
                rect(projectiles[i].pos.x, projectiles[i].pos.y, 5, 12);
            }
            
            // Move defender ship
            if (keyIsPressed) {
                if (keyCode === UP) {
                    moveDefender(true, false, false, false, false);
                }
                if (keyCode === DOWN) { 
                    moveDefender(false, true, false, false, false);
                }
                if (keyCode === LEFT) { 
                    moveDefender(false, false, true, false, false);
                }
                if (keyCode === RIGHT) { 
                    moveDefender(false, false, false, true, false);
                }
            }
            
            // Fire defender projectiles
            if (mouseIsPressed) { 
                moveDefender(false, false, false, false, true);
            }
            
            // Handle collisions
            handleCollisions();
            
            // Move enemy fleet
            moveEnemyFleet();
        }
    }
    else {
        contestBackdrop();
        
        if (mouseIsPressed) {
            launched = true;
        }
    }
};
